<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>bpftrace -e 'BEGIN { printf("%s\n", str($1 + 1)) }' "hello"</title>
<date>2024-10-22</date>
</info>
<simpara>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/asciidoctor/asciidoctor@2.0/data/stylesheets/asciidoctor-default.css"&gt;
    &lt;title&gt;Documentation&lt;/title&gt;
    &lt;style&gt;
        #version-selector {
            line-height: 1.8;</simpara>
<literallayout class="monospaced">/* Make dropdown stick at top while scrolling */
position: sticky;
top: 0;
z-index: 999999;</literallayout>
<literallayout class="monospaced">            /* Make selector visually distinct while scrolling */
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            background-color: #f0f0f0;
        }
    &lt;/style&gt;
&lt;/head&gt;</literallayout>
<simpara>&lt;script&gt;
    function changeVersion() {
        var select = document.getElementById("version-select");
        var selectedVersion = select.value;</simpara>
<literallayout class="monospaced">// Extract the base path (everything before the version)
var currentPath = window.location.pathname;
var basePath = currentPath.substring(0, currentPath.lastIndexOf('/') + 1);</literallayout>
<literallayout class="monospaced">    // Redirect to the new path
    var newPath = basePath + selectedVersion + ".html";
    window.location.href = newPath;
}</literallayout>
<literallayout class="monospaced">// Set the correct option based on the current URL
document.addEventListener("DOMContentLoaded", function() {
    var currentPath = window.location.pathname;
    var currentFileIdx = currentPath.lastIndexOf('/') + 1;
    var currentVersion = currentPath.slice(currentFileIdx, -5);</literallayout>
<literallayout class="monospaced">        var select = document.getElementById("version-select");
        select.value = currentVersion;
    });
&lt;/script&gt;</literallayout>
<simpara>&lt;body&gt;
    &lt;div id="content-wrapper"&gt;
        &lt;div id="content"&gt;
          &lt;div id="version-selector"&gt;
              &lt;label for="version-select"&gt;Documentation version: &lt;/label&gt;
              &lt;select id="version-select" onchange="changeVersion()"&gt;
                  &lt;option value="v0.21.x"&gt;v0.21.x (latest)&lt;/option&gt;
                  &lt;option value="master"&gt;master (unstable)&lt;/option&gt;
              &lt;/select&gt;
          &lt;/div&gt;
&lt;refsynopsisdiv xml:id="<emphasis>synopsis"&gt;
&lt;title&gt;Synopsis&lt;/title&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;bpftrace&lt;/emphasis&gt; [&lt;emphasis&gt;OPTIONS&lt;/emphasis&gt;] &lt;emphasis&gt;FILENAME&lt;/emphasis&gt;&lt;?asciidoc-br?&gt;
&lt;emphasis role="strong"&gt;bpftrace&lt;/emphasis&gt; [&lt;emphasis&gt;OPTIONS&lt;/emphasis&gt;] -e 'program code'&lt;/simpara&gt;
&lt;simpara&gt;When &lt;emphasis&gt;FILENAME&lt;/emphasis&gt; is "&lt;emphasis&gt;-&lt;/emphasis&gt;", bpftrace will read program code from stdin.&lt;/simpara&gt;
&lt;/refsynopsisdiv&gt;
&lt;refsection xml:id="_description"&gt;
&lt;title&gt;Description&lt;/title&gt;
&lt;simpara&gt;bpftrace is a high-level tracing language and runtime for Linux based on eBPF.
It supports static and dynamic tracing for both the kernel and user-space.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_examples"&gt;
&lt;title&gt;Examples&lt;/title&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;Trace processes calling sleep&lt;/term&gt;
&lt;listitem&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;screen&gt;# bpftrace -e 'kprobe:do_nanosleep { printf("%d sleeping\n", pid); }'&lt;/screen&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;Trace processes calling sleep while spawning &lt;literal&gt;sleep 5&lt;/literal&gt; as a child process&lt;/term&gt;
&lt;listitem&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;screen&gt;# bpftrace -e 'kprobe:do_nanosleep { printf("%d sleeping\n", pid); }' -c 'sleep 5'&lt;/screen&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;List all probes with "sleep" in their name&lt;/term&gt;
&lt;listitem&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;screen&gt;# bpftrace -l '<emphasis role="strong">sleep</emphasis>'&lt;/screen&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;List all the probes attached in the program&lt;/term&gt;
&lt;listitem&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;screen&gt;# bpftrace -l -e 'kprobe:do_nanosleep { printf("%d sleeping\n", pid); }'&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_supported_architectures"&gt;
&lt;title&gt;Supported architectures&lt;/title&gt;
&lt;simpara&gt;x86_64, arm64, s390x, arm32, loongarch64, mips64, ppc64, riscv64&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_options"&gt;
&lt;title&gt;Options&lt;/title&gt;
&lt;refsection xml:id="_b_mode"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-B&lt;/emphasis&gt; &lt;emphasis&gt;MODE&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Set the buffer mode for stdout.&lt;/simpara&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;Valid values are&lt;/term&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;none&lt;/emphasis&gt; No buffering. Each I/O is written as soon as possible&lt;?asciidoc-br?&gt;
&lt;emphasis role="strong"&gt;line&lt;/emphasis&gt; Data is written on the first newline or when the buffer is full. This is the default mode.&lt;?asciidoc-br?&gt;
&lt;emphasis role="strong"&gt;full&lt;/emphasis&gt; Data is written once the buffer is full.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_c_command"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-c&lt;/emphasis&gt; &lt;emphasis&gt;COMMAND&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Run &lt;emphasis&gt;COMMAND&lt;/emphasis&gt; as a child process.
When the child terminates bpftrace will also terminate, as if 'exit()' had been called.
If bpftrace terminates before the child process does the child process will be terminated with a SIGTERM.
If used, 'USDT' probes will only be attached to the child process.
To avoid a race condition when using 'USDTs', the child is stopped after 'execve' using 'ptrace(2)' and continued when all 'USDT' probes are attached.
The child process runs with the same privileges as bpftrace itself (usually root).&lt;/simpara&gt;
&lt;simpara&gt;Unless otherwise specified, bpftrace does not perform any implicit filtering. Therefore, if you are only interested in
events in &lt;emphasis&gt;COMMAND&lt;/emphasis&gt;, you may want to filter based on the child PID. The child PID is available to programs as the 'cpid' builtin.
For example, you could add the predicate &lt;literal&gt;/pid == cpid/&lt;/literal&gt; to probes with userspace context.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_d_stage"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-d STAGE&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Enable debug mode.
For more details see the &lt;xref linkend="_debug_output"/&gt; section.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_dry_run"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--dry-run&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Terminate execution right after attaching all the probes. Useful for testing
that the script can be parsed, loaded, and attached, without actually running
it.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_e_program"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-e&lt;/emphasis&gt; &lt;emphasis&gt;PROGRAM&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Execute &lt;emphasis&gt;PROGRAM&lt;/emphasis&gt; instead of reading the program from a file or stdin.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_f_format"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-f&lt;/emphasis&gt; &lt;emphasis&gt;FORMAT&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Set the output format.&lt;/simpara&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;Valid values are&lt;/term&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;json&lt;/emphasis&gt;&lt;?asciidoc-br?&gt;
&lt;emphasis role="strong"&gt;text&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;simpara&gt;Note: the json output is ndjson, meaning each line of the streamed output is a single blob of valid json.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_h_help"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-h, --help&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Print the help summary.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_i_dir"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-I&lt;/emphasis&gt; &lt;emphasis&gt;DIR&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Add the directory &lt;emphasis&gt;DIR&lt;/emphasis&gt; to the search path for C headers.
This option can be used multiple times.
For more details see the &lt;xref linkend="_preprocessor_options"/&gt; section.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_include_filename"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--include&lt;/emphasis&gt; &lt;emphasis&gt;FILENAME&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Add &lt;emphasis&gt;FILENAME&lt;/emphasis&gt; as an include for the pre-processor.
This is equal to adding '<emphasis role="marked">include &lt;emphasis&gt;FILENAME&lt;/emphasis&gt;' at the top of the program.
This option can be used multiple times.
For more details see the &lt;xref linkend="_preprocessor_options"/&gt; section.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_info"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--info&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Print detailed information about features supported by the kernel and the bpftrace build.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_k"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-k&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Errors from bpf-helpers(7) are silently ignored by default which can lead to strange results.&lt;/simpara&gt;
&lt;simpara&gt;This flag enables the detection of errors (except for errors from 'probe_read</emphasis>*' BPF helpers).
When errors occur bpftrace will log an error containing the source location and the error code:&lt;/simpara&gt;
&lt;screen&gt;stdin:48-57: WARNING: Failed to probe_read_user_str: Bad address (-14)
u:lib.so:"fn(char const*)" { printf("arg0:%s\n", str(arg0));}
                                                 <subscript>~</subscript><subscript>~</subscript><subscript>~</subscript>&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="<emphasis>kk"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-kk&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Same as '-k' but also includes the errors from 'probe_read</emphasis>*'  BPF helpers.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_l_searchfilename"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-l&lt;/emphasis&gt; [&lt;emphasis&gt;SEARCH&lt;/emphasis&gt;|&lt;emphasis&gt;FILENAME&lt;/emphasis&gt;]&lt;/title&gt;
&lt;simpara&gt;List all probes that match the &lt;emphasis&gt;SEARCH&lt;/emphasis&gt; pattern.
If the pattern is omitted all probes will be listed.
This pattern supports wildcards in the same way that probes do.
E.g. '-l kprobe:*file*' to list all 'kprobes' with 'file' in the name.
This can be used with a program, which will list all probes in that program.
For more details see the &lt;xref linkend="_listing_probes"/&gt; section.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_no_feature_featurefeature"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--no-feature&lt;/emphasis&gt; &lt;emphasis&gt;feature,feature,&#8230;&#8203;&lt;/emphasis&gt;&lt;/title&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;Disable detected features, valid values are&lt;/term&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;uprobe_multi&lt;/emphasis&gt; to disable uprobe_multi link&lt;?asciidoc-br?&gt;
&lt;emphasis role="strong"&gt;kprobe_multi&lt;/emphasis&gt; to disable kprobe_multi link&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_no_warnings"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--no-warnings&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Suppress all warning messages created by bpftrace.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_o_filename"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-o&lt;/emphasis&gt; &lt;emphasis&gt;FILENAME&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Write bpftrace tracing output to &lt;emphasis&gt;FILENAME&lt;/emphasis&gt; instead of stdout.
This doesn&#8217;t include child process (&lt;emphasis role="strong"&gt;-c&lt;/emphasis&gt; option) output.
Errors are still written to stderr.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_p_pid"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-p&lt;/emphasis&gt; &lt;emphasis&gt;PID&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Attach to the process with &lt;emphasis&gt;PID&lt;/emphasis&gt;.
If the process terminates, bpftrace will also terminate.
When using USDT probes, uprobes, and uretprobes they will be attached to only this process.
For listing uprobes/uretprobes set the target to '<emphasis role="strong">' and the process&#8217;s address space will be searched for the symbols.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_q"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-q&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Keep messages quiet.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_unsafe"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--unsafe&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Some calls, like 'system', are marked as unsafe as they can have dangerous side effects ('system("rm -rf")') and are disabled by default.
This flag allows their use.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_usdt_file_activation"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;--usdt-file-activation&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Activate usdt semaphores based on file path.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_v_version"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-V, --version&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Print bpftrace version information.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_v"&gt;
&lt;title&gt;&lt;emphasis role="strong"&gt;-v&lt;/emphasis&gt;&lt;/title&gt;
&lt;simpara&gt;Enable verbose messages.
For more details see the &lt;xref linkend="_verbose_output"/&gt; section.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_terminology"&gt;
&lt;title&gt;Terminology&lt;/title&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50</emphasis>"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;BPF&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Berkeley Packet Filter: a kernel technology originally developed for optimizing the processing of packet filters (eg, tcpdump expressions).&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;BPF map&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;A BPF memory object, which is used by bpftrace to create many higher-level objects.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;BTF&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;BPF Type Format: the metadata format which encodes the debug info related to BPF program/map.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;dynamic tracing&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Also known as dynamic instrumentation, this is a technology that can instrument any software event, such as function calls and returns, by live modification of instruction text. Target software usually does not need special capabilities to support dynamic tracing, other than a symbol table that bpftrace can read. Since this instruments all software text, it is not considered a stable API, and the target functions may not be documented outside of their source code.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;eBPF&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Enhanced BPF: a kernel technology that extends BPF so that it can execute more generic programs on any events, such as the bpftrace programs listed below. It makes use of the BPF sandboxed virtual machine environment. Also note that eBPF is often just referred to as BPF.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;kprobes&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;A Linux kernel technology for providing dynamic tracing of kernel functions.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;probe&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;An instrumentation point in software or hardware, that generates events that can execute bpftrace programs.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;static tracing&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Hard-coded instrumentation points in code. Since these are fixed, they may be provided as part of a stable API, and documented.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;tracepoints&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;A Linux kernel technology for providing static tracing.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uprobes&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;A Linux kernel technology for providing dynamic tracing of user-level functions.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;USDT&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User Statically-Defined Tracing: static tracing points for user-level software. Some applications support USDT.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_program_files"&gt;
&lt;title&gt;Program Files&lt;/title&gt;
&lt;simpara&gt;Programs saved as files are often called scripts and can be executed by specifying their file name.
We use a &lt;literal&gt;.bt&lt;/literal&gt; file extension, short for bpftrace, but the extension is not required.&lt;/simpara&gt;
&lt;simpara&gt;For example, listing the sleepers.bt file using &lt;literal&gt;cat&lt;/literal&gt;:&lt;/simpara&gt;
&lt;screen&gt;</emphasis> cat sleepers.bt</simpara>
<simpara>tracepoint:syscalls:sys_enter_nanosleep {
  printf("%s is sleeping.\n", comm);
}&lt;/screen&gt;
&lt;simpara&gt;And then calling it:&lt;/simpara&gt;
&lt;screen&gt;# bpftrace sleepers.bt</simpara>
<simpara>Attaching 1 probe&#8230;&#8203;
iscsid is sleeping.
iscsid is sleeping.&lt;/screen&gt;
&lt;simpara&gt;It can also be made executable to run stand-alone.
Start by adding an interpreter line at the top (&lt;literal&gt;#!&lt;/literal&gt;) with either the path to your installed bpftrace (/usr/local/bin is the default) or the path to &lt;literal&gt;env&lt;/literal&gt; (usually just &lt;literal&gt;/usr/bin/env&lt;/literal&gt;) followed by &lt;literal&gt;bpftrace&lt;/literal&gt; (so it will find bpftrace in your &lt;literal&gt;$PATH&lt;/literal&gt;):&lt;/simpara&gt;
&lt;screen&gt;#!/usr/local/bin/bpftrace</simpara>
<simpara>tracepoint:syscalls:sys_enter_nanosleep {
  printf("%s is sleeping.\n", comm);
}&lt;/screen&gt;
&lt;simpara&gt;Then make it executable:&lt;/simpara&gt;
&lt;screen&gt;# chmod 755 sleepers.bt
# ./sleepers.bt</simpara>
<simpara>Attaching 1 probe&#8230;&#8203;
iscsid is sleeping.
iscsid is sleeping.&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_bpftrace_language"&gt;
&lt;title&gt;bpftrace Language&lt;/title&gt;
&lt;simpara&gt;The &lt;literal&gt;bpftrace&lt;/literal&gt; (&lt;literal&gt;bt&lt;/literal&gt;) language is inspired by the D language used by &lt;literal&gt;dtrace&lt;/literal&gt; and uses the same program structure.
Each script consists of a preamble and one or more action blocks.&lt;/simpara&gt;
&lt;screen&gt;preamble</simpara>
<simpara>actionblock1
actionblock2&lt;/screen&gt;
&lt;simpara&gt;Preprocessor and type definitions take place in the preamble:&lt;/simpara&gt;
&lt;screen&gt;#include &lt;linux/socket.h&gt;
#define RED "\033[31m"</simpara>
<simpara>struct S {
  int x;
}&lt;/screen&gt;
&lt;simpara&gt;Each action block consists of three parts:&lt;/simpara&gt;
&lt;screen&gt;probe[,probe]
/predicate/ {
  action
}&lt;/screen&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;Probes&lt;/term&gt;
&lt;listitem&gt;
&lt;simpara&gt;A probe specifies the event and event type to attach too. &lt;link linkend="_probes"&gt;Probes list&lt;/link&gt;.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;varlistentry&gt;
&lt;term&gt;Predicate&lt;/term&gt;
&lt;listitem&gt;
&lt;simpara&gt;The predicate is an optional condition that must be met for the action to be executed.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;varlistentry&gt;
&lt;term&gt;Action&lt;/term&gt;
&lt;listitem&gt;
&lt;simpara&gt;  Actions are the programs that run when an event fires (and the predicate is met).
An action is a semicolon (&lt;literal&gt;;&lt;/literal&gt;) separated list of statements and always enclosed by brackets &lt;literal&gt;{}&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;simpara&gt;A program will continue running until Ctrl-C is hit, or an &lt;literal&gt;exit&lt;/literal&gt; function is called.
When a program exits, all populated maps are printed (this behavior and maps are explained in later sections).&lt;/simpara&gt;
&lt;simpara&gt;A basic script that traces the &lt;literal&gt;open(2)&lt;/literal&gt; and &lt;literal&gt;openat(2)&lt;/literal&gt; system calls can be written as follows:&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
	printf("Tracing open syscalls&#8230;&#8203; Hit Ctrl-C to end.\n");
}</simpara>
<simpara>tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat {
	printf("%-6d %-16s %s\n", pid, comm, str(args.filename));
}&lt;/screen&gt;
&lt;simpara&gt;The above script has two action blocks and a total of 3 probes.&lt;/simpara&gt;
&lt;simpara&gt;The first action block uses the special &lt;literal&gt;BEGIN&lt;/literal&gt; probe, which fires once during &lt;literal&gt;bpftrace&lt;/literal&gt; startup.
This probe is used to print a header, indicating that the tracing has started.&lt;/simpara&gt;
&lt;simpara&gt;The second action block uses two probes, one for &lt;literal&gt;open&lt;/literal&gt; and one for &lt;literal&gt;openat&lt;/literal&gt;, and defines an action that prints the file being &lt;literal&gt;open&lt;/literal&gt; ed as well as the &lt;literal&gt;pid&lt;/literal&gt; and &lt;literal&gt;comm&lt;/literal&gt; of the process that execute the syscall.
See the &lt;xref linkend="_probes"/&gt; section for details on the available probe types.&lt;/simpara&gt;
&lt;refsection xml:id="_arrays"&gt;
&lt;title&gt;Arrays&lt;/title&gt;
&lt;simpara&gt;bpftrace supports accessing one-dimensional arrays like those found in &lt;literal&gt;C&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;Constructing arrays from scratch, like &lt;literal&gt;int a[] = {1,2,3}&lt;/literal&gt; in &lt;literal&gt;C&lt;/literal&gt;, is not supported.
They can only be read into a variable from a pointer.&lt;/simpara&gt;
&lt;simpara&gt;The &lt;literal&gt;[]&lt;/literal&gt; operator is used to access elements.&lt;/simpara&gt;
&lt;screen&gt;struct MyStruct {
  int y[4];
}</simpara>
<simpara>kprobe:dummy {
  $s = (struct MyStruct <emphasis role="strong">) arg0;
  print($s-&gt;y[0]);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_comments"&gt;
&lt;title&gt;Comments&lt;/title&gt;
&lt;simpara&gt;Both single line and multi line comments are supported.&lt;/simpara&gt;
&lt;screen&gt;// A single line comment
interval:s:1 { // can also be used to comment inline
/</emphasis>
 a multi line comment</simpara>
<simpara><emphasis role="strong">/
  print(/</emphasis> inline comment block */ 1);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_conditionals"&gt;
&lt;title&gt;Conditionals&lt;/title&gt;
&lt;simpara&gt;Conditional expressions are supported in the form of if/else statements and the ternary operator.&lt;/simpara&gt;
&lt;simpara&gt;The ternary operator consists of three operands: a condition followed by a &lt;literal&gt;?&lt;/literal&gt;, the expression to execute when the condition is true followed by a &lt;literal&gt;:&lt;/literal&gt; and the expression to execute if the condition is false.&lt;/simpara&gt;
&lt;screen&gt;condition ? ifTrue : ifFalse&lt;/screen&gt;
&lt;simpara&gt;Both the &lt;literal&gt;ifTrue&lt;/literal&gt; and &lt;literal&gt;ifFalse&lt;/literal&gt; expressions must be of the same type, mixing types is not allowed.&lt;/simpara&gt;
&lt;simpara&gt;The ternary operator can be used as part of an assignment.&lt;/simpara&gt;
&lt;screen&gt;$a == 1 ? print("true") : print("false");
$b = $a &gt; 0 ? $a : -1;&lt;/screen&gt;
&lt;simpara&gt;If/else statements, like the one in &lt;literal&gt;C&lt;/literal&gt;, are supported.&lt;/simpara&gt;
&lt;screen&gt;if (condition) {
  ifblock
} else if (condition) {
  if2block
} else {
  elseblock
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_config_block"&gt;
&lt;title&gt;Config Block&lt;/title&gt;
&lt;simpara&gt;To improve script portability, you can set bpftrace &lt;xref linkend="_config_variables"/&gt; via the config block,
which can only be placed at the top of the script before any probes (even &lt;literal&gt;BEGIN&lt;/literal&gt;).&lt;/simpara&gt;
&lt;screen&gt;config = {
    stack_mode=perf;
    max_map_keys=2
}</simpara>
<simpara>BEGIN { &#8230;&#8203; }</simpara>
<simpara>uprobe:./testprogs/uprobe_test:uprobeFunction1 { &#8230;&#8203; }&lt;/screen&gt;
&lt;simpara&gt;The names of the config variables can be in the format of environment variables
or their lowercase equivalent without the &lt;literal&gt;BPFTRACE_&lt;/literal&gt; prefix. For example,
&lt;literal&gt;BPFTRACE_STACK_MODE&lt;/literal&gt;, &lt;literal&gt;STACK_MODE&lt;/literal&gt;, and &lt;literal&gt;stack_mode&lt;/literal&gt; are equivalent.&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Note&lt;/emphasis&gt;: Environment variables for the same config take precedence over those set
inside a script config block.&lt;/simpara&gt;
&lt;simpara&gt;&lt;link linkend="_config_variables"&gt;List of All Config Variables&lt;/link&gt;&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_data_types"&gt;
&lt;title&gt;Data Types&lt;/title&gt;
&lt;simpara&gt;The following fundamental types are provided by the language.
Note: Integers are by default represented as 64 bit signed but that can be
changed by either casting them or, for scratch variables, explicitly specifying
the type upon declaration.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;emphasis role="strong"&gt;Type&lt;/emphasis&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;emphasis role="strong"&gt;Description&lt;/emphasis&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint8&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Unsigned 8 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int8&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Signed 8 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint16&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Unsigned 16 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int16&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Signed 16 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Unsigned 32 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Signed 32 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Unsigned 64 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Signed 64 bit integer&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;screen&gt;BEGIN { $x = 1&lt;&lt;16; printf("%d %d\n", (uint16)$x, $x); }</simpara>
<simpara>/*
 * Output:
 * 0 65536
 */&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_filtering"&gt;
&lt;title&gt;Filtering&lt;/title&gt;
&lt;simpara&gt;Filters (also known as predicates) can be added after probe names.
The probe still fires, but it will skip the action unless the filter is true.&lt;/simpara&gt;
&lt;screen&gt;kprobe:vfs_read /arg2 &lt; 16/ {
  printf("small read: %d byte buffer\n", arg2);
}</simpara>
<simpara>kprobe:vfs_read /comm == "bash"/ {
  printf("read by %s\n", comm);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="<emphasis>floating_point"&gt;
&lt;title&gt;Floating-point&lt;/title&gt;
&lt;simpara&gt;Floating-point numbers are not supported by BPF and therefore not by bpftrace.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_identifiers"&gt;
&lt;title&gt;Identifiers&lt;/title&gt;
&lt;simpara&gt;Identifiers must match the following regular expression: &lt;literal&gt;[_a-zA-Z]<emphasis role="strong"><phrase role="_a-zA-Z0-9">&lt;/literal&gt;&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_literals"&gt;
&lt;title&gt;Literals&lt;/title&gt;
&lt;simpara&gt;Integer and string literals are supported.&lt;/simpara&gt;
&lt;simpara&gt;Integer literals can be defined in the following formats:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;decimal (base 10)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;octal (base 8)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;hexadecimal (base 16)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;scientific (base 10)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Octal literals have to be prefixed with a &lt;literal&gt;0&lt;/literal&gt; e.g. &lt;literal&gt;0123&lt;/literal&gt;.
Hexadecimal literals start with either &lt;literal&gt;0x&lt;/literal&gt; or &lt;literal&gt;0X&lt;/literal&gt; e.g. &lt;literal&gt;0x10&lt;/literal&gt;.
Scientific literals are written in the &lt;literal&gt;&lt;m&gt;e&lt;n&gt;&lt;/literal&gt; format which is a shorthand for &lt;literal&gt;m*10^n&lt;/literal&gt; e.g. &lt;literal&gt;$i = 2e3;&lt;/literal&gt;.
Note that scientific literals are integer only due to the lack of floating point support e.g. &lt;literal&gt;1e-3&lt;/literal&gt; is not valid.&lt;/simpara&gt;
&lt;simpara&gt;To improve the readability of big literals an underscore &lt;literal&gt;</emphasis>&lt;/literal&gt; can be used as field separator e.g. 1_000_123_000.&lt;/simpara&gt;
&lt;simpara&gt;Integer suffixes as found in the C language are parsed by bpftrace to ensure compatibility with C headers/definitions but they&#8217;re not used as size specifiers.
&lt;literal&gt;123UL&lt;/literal&gt;, &lt;literal&gt;123U&lt;/literal&gt; and &lt;literal&gt;123LL&lt;/literal&gt; all result in the same integer type with a value of &lt;literal&gt;123&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;Character literals are not supported at this time, and the corresponding ASCII code must be used instead:&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  printf("Echo A: %c\n", 65);
}&lt;/screen&gt;
&lt;simpara&gt;String literals can be defined by enclosing the character string in double quotes e.g. &lt;literal&gt;$str = "Hello world";&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;Strings support the following escape sequences:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50</phrase></emphasis>"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;\n&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Newline&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;\t&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Tab&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;\0nn&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Octal value nn&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;\xnn&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Hexadecimal value nn&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_loops"&gt;
&lt;title&gt;Loops&lt;/title&gt;
&lt;refsection xml:id="_for"&gt;
&lt;title&gt;For&lt;/title&gt;
&lt;simpara&gt;With Linux 5.13 and later, &lt;literal&gt;for&lt;/literal&gt; loops can be used to iterate over elements in a map.&lt;/simpara&gt;
&lt;screen&gt;for ($kv : @map) {
  block;
}&lt;/screen&gt;
&lt;simpara&gt;The variable declared in the &lt;literal&gt;for&lt;/literal&gt; loop will be initialised on each iteration with a tuple containing a key and a value from the map, i.e. &lt;literal&gt;$kv = (key, value)&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;@map[10] = 20;
for ($kv : @map) {
  print($kv.0); // key
  print($kv.1); // value
}&lt;/screen&gt;
&lt;simpara&gt;When a map has multiple keys, the loop variable will be initialised with nested tuple of the form: &lt;literal&gt;((key1, key2, &#8230;&#8203;), value)&lt;/literal&gt;&lt;/simpara&gt;
&lt;screen&gt;@map[10,11] = 20;
for ($kv : @map) {
  print($kv.0.0); // key 1
  print($kv.0.1); // key 2
  print($kv.1);   // value
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_while"&gt;
&lt;title&gt;While&lt;/title&gt;
&lt;simpara&gt;Since kernel 5.3 BPF supports loops as long as the verifier can prove they&#8217;re bounded and fit within the instruction limit.&lt;/simpara&gt;
&lt;simpara&gt;In bpftrace, loops are available through the &lt;literal&gt;while&lt;/literal&gt; statement.&lt;/simpara&gt;
&lt;screen&gt;while (condition) {
  block;
}&lt;/screen&gt;
&lt;simpara&gt;Within a while-loop the following control flow statements can be used:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;continue&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;skip processing of the rest of the block and jump back to the evaluation of the conditional&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;break&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Terminate the loop&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;screen&gt;interval:s:1 {
  $i = 0;
  while ($i &lt;= 100) {
    printf("%d ", $i);
    if ($i &gt; 5) {
      break;
    }
    $i++
  }
  printf("\n");
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_unroll"&gt;
&lt;title&gt;Unroll&lt;/title&gt;
&lt;simpara&gt;Loop unrolling is also supported with the &lt;literal&gt;unroll&lt;/literal&gt; statement.&lt;/simpara&gt;
&lt;screen&gt;unroll(n) {
  block;
}&lt;/screen&gt;
&lt;simpara&gt;The compiler will evaluate the block &lt;literal&gt;n&lt;/literal&gt; times and generate the BPF code for the block &lt;literal&gt;n&lt;/literal&gt; times.
As this happens at compile time &lt;literal&gt;n&lt;/literal&gt; must be a constant greater than 0 (&lt;literal&gt;n &gt; 0&lt;/literal&gt;).&lt;/simpara&gt;
&lt;simpara&gt;The following two probes compile into the same code:&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  unroll(3) {
    print("Unrolled")
  }
}</simpara>
<simpara>interval:s:1 {
  print("Unrolled")
  print("Unrolled")
  print("Unrolled")
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_operators_and_expressions"&gt;
&lt;title&gt;Operators and Expressions&lt;/title&gt;
&lt;refsection xml:id="_arithmetic_operators"&gt;
&lt;title&gt;Arithmetic Operators&lt;/title&gt;
&lt;simpara&gt;The following operators are available for integer arithmetic:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;integer addition&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;-&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;integer subtraction&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;*&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;integer multiplication&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;/&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;integer division&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;%&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;integer modulo&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;simpara&gt;Operations between a signed and an unsigned integer are allowed providing
bpftrace can statically prove a safe conversion is possible. If safe conversion
is not guaranteed, the operation is undefined behavior and a corresponding
warning will be emitted.&lt;/simpara&gt;
&lt;simpara&gt;If the two operands are different size, the smaller integer is implicitly
promoted to the size of the larger one. Sign is preserved in the promotion.
For example, &lt;literal&gt;(uint32)5 + (uint8)3&lt;/literal&gt; is converted to &lt;literal&gt;(uint32)5 + (uint32)3&lt;/literal&gt;
which results in &lt;literal&gt;(uint32)8&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_logical_operators"&gt;
&lt;title&gt;Logical Operators&lt;/title&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;amp;&amp;amp;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Logical AND&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;||&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Logical OR&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;!&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Logical NOT&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_bitwise_operators"&gt;
&lt;title&gt;Bitwise Operators&lt;/title&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;amp;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;AND&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;|&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;OR&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;^&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;XOR&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;lt;&amp;lt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Left shift the left-hand operand by the number of bits specified by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;gt;&amp;gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Right shift the left-hand operand by the number of bits specified by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_relational_operators"&gt;
&lt;title&gt;Relational Operators&lt;/title&gt;
&lt;simpara&gt;The following relational operators are defined for integers and pointers.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;lt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand expression is less than right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;lt;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand expression is less than or equal to right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand expression is bigger than right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;gt;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand expression is bigger or equal to than right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;==&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand expression equal to right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;!=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand expression not equal to right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;simpara&gt;The following relation operators are available for comparing strings and integer arrays.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;==&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand string equal to right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;!=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;left-hand string not equal to right-hand&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_assignment_operators"&gt;
&lt;title&gt;Assignment Operators&lt;/title&gt;
&lt;simpara&gt;The following assignment operators can be used on both &lt;literal&gt;map&lt;/literal&gt; and &lt;literal&gt;scratch&lt;/literal&gt; variables:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50*"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Assignment, assign the right-hand expression to the left-hand variable&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;lt;&amp;lt;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Update the variable with its value left shifted by the number of bits specified by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;gt;&amp;gt;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Update the variable with its value right shifted by the number of bits specified by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Increment the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;-=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Decrement the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;*=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Multiple the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;/=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Divide the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;%=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Modulo the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&amp;=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Bitwise AND the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;|=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Bitwise OR the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;^=&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Bitwise XOR the variable by the right-hand expression value&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;simpara&gt;All these operators are syntactic sugar for combining assignment with the specified operator.
&lt;literal&gt;@ -= 5&lt;/literal&gt; is equal to &lt;literal&gt;@ = @ - 5&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_increment_and_decrement_operators"&gt;
&lt;title&gt;Increment and Decrement Operators&lt;/title&gt;
&lt;simpara&gt;The increment (&lt;literal&gt;&#43;&#43;&lt;/literal&gt;) and decrement (&lt;literal&gt;--&lt;/literal&gt;) operators can be used on integer and pointer variables to increment their value by one.
They can only be used on variables and can either be applied as prefix or suffix.
The difference is that the expression &lt;literal&gt;x&#43;&#43;&lt;/literal&gt; returns the original value of &lt;literal&gt;x&lt;/literal&gt;, before it got incremented while &lt;literal&gt;&#43;&#43;x&lt;/literal&gt; returns the value of &lt;literal&gt;x&lt;/literal&gt; post increment.&lt;/simpara&gt;
&lt;screen&gt;$x = 10;
$y = $x--; // y = 10; x = 9
$a = 10;
$b = --$a; // a = 9; b = 9&lt;/screen&gt;
&lt;simpara&gt;Note that maps will be implicitly declared and initialized to 0 if not already declared or defined.
Scratch variables must be initialized before using these operators.&lt;/simpara&gt;
&lt;simpara&gt;Note &lt;literal&gt;&#43;&#43;&lt;/literal&gt;/&lt;literal&gt;--&lt;/literal&gt; on a shared global variable can lose updates. See &lt;link linkend="map-functions-count"&gt;&lt;literal&gt;count()&lt;/literal&gt;&lt;/link&gt; for more details.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_pointers"&gt;
&lt;title&gt;Pointers&lt;/title&gt;
&lt;simpara&gt;Pointers in bpftrace are similar to those found in &lt;literal&gt;C&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_structs"&gt;
&lt;title&gt;Structs&lt;/title&gt;
&lt;simpara&gt;&lt;literal&gt;C&lt;/literal&gt; like structs are supported by bpftrace.
Fields are accessed with the &lt;literal&gt;.&lt;/literal&gt; operator.
Fields of a pointer to a struct can be accessed with the &lt;literal&gt;-&gt;&lt;/literal&gt; operator.&lt;/simpara&gt;
&lt;simpara&gt;Custom structs can be defined in the preamble.&lt;/simpara&gt;
&lt;simpara&gt;Constructing structs from scratch, like &lt;literal&gt;struct X var = {.f1 = 1}&lt;/literal&gt; in &lt;literal&gt;C&lt;/literal&gt;, is not supported.
They can only be read into a variable from a pointer.&lt;/simpara&gt;
&lt;screen&gt;struct MyStruct {
  int a;
}</simpara>
<simpara>kprobe:dummy {
  $ptr = (struct MyStruct *) arg0;
  $st = *$ptr;
  print($st.a);
  print($ptr-&gt;a);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_tuples"&gt;
&lt;title&gt;Tuples&lt;/title&gt;
&lt;simpara&gt;bpftrace has support for immutable N-tuples (&lt;literal&gt;n &gt; 1&lt;/literal&gt;).
A tuple is a sequence type (like an array) where, unlike an array, every element can have a different type.&lt;/simpara&gt;
&lt;simpara&gt;Tuples are a comma separated list of expressions, enclosed in brackets, &lt;literal&gt;(1,2)&lt;/literal&gt;
Individual fields can be accessed with the &lt;literal&gt;.&lt;/literal&gt; operator.
Tuples are zero indexed like arrays are.&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  $a = (1,2);
  $b = (3,4, $a);
  print($a);
  print($b);
  print($b.0);
}</simpara>
<simpara>/*
 * Sample output:
 * (1, 2)
 * (3, 4, (1, 2))
 * 3
 */&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_type_conversion"&gt;
&lt;title&gt;Type conversion&lt;/title&gt;
&lt;simpara&gt;Integer and pointer types can be converted using explicit type conversion with an expression like:&lt;/simpara&gt;
&lt;screen&gt;$y = (uint32) $z;
$py = (int16 *) $pz;&lt;/screen&gt;
&lt;simpara&gt;Integer casts to a higher rank are sign extended.
Conversion to a lower rank is done by zeroing leading bits.&lt;/simpara&gt;
&lt;simpara&gt;It is also possible to cast between integers and integer arrays using the same syntax:&lt;/simpara&gt;
&lt;screen&gt;$a = (uint8[8]) 12345;
$x = (uint64) $a;&lt;/screen&gt;
&lt;simpara&gt;Both the cast and the destination type must have the same size.
When casting to an array, it is possible to omit the size which will be determined automatically from the size of the cast value.&lt;/simpara&gt;
&lt;simpara&gt;Integers are internally represented as 64 bit signed. If you need another representation, you may cast to the supported &lt;xref linkend="_data_types"/&gt;.&lt;/simpara&gt;
&lt;refsection xml:id="_array_casts"&gt;
&lt;title&gt;Array casts&lt;/title&gt;
&lt;simpara&gt;It is possible to cast between integer arrays and integers.
Both the source and the destination type must have the same size.
The main purpose of this is to allow casts from/to byte arrays.&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  $a = (int8[8])12345;
  printf("%x %x\n", $a[0], $a[1]);
  printf("%d\n", (uint64)$a);
}</simpara>
<simpara>/*
 * Output:
 * 39 30
 * 12345
 */&lt;/screen&gt;
&lt;simpara&gt;When casting to an array, it is possible to omit the size which will be determined automatically from the size of the cast value.&lt;/simpara&gt;
&lt;simpara&gt;This feature is especially useful when working with IP addresses since various libraries, builtins, and parts of the kernel use different approaches to represent addresses (usually byte arrays vs. integers).
Array casting allows seamless comparison of such representations:&lt;/simpara&gt;
&lt;screen&gt;kfunc:tcp_connect {
    if (args-&gt;sk-&gt;__sk_common.skc_daddr == (uint32)pton("127.0.0.1"))
        &#8230;&#8203;
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_variables_and_maps"&gt;
&lt;title&gt;Variables and Maps&lt;/title&gt;
&lt;simpara&gt;bpftrace knows two types of variables, 'scratch' and 'map'.&lt;/simpara&gt;
&lt;simpara&gt;'scratch' variables are kept on the BPF stack and only exists during the execution of the action block and cannot be accessed outside of the program.
Scratch variable names always start with a &lt;literal&gt;$&lt;/literal&gt;, e.g. &lt;literal&gt;$myvar&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;'scratch' variables can also declared before or during initialization with &lt;literal&gt;let&lt;/literal&gt; e.g.&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;let $x;
let $y = 11;&lt;/screen&gt;
&lt;simpara&gt;If no assignment is specified variables will initialize to 0.&lt;/simpara&gt;
&lt;simpara&gt;You can also specify the type in the declaration e.g.&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;let $x: uint8;
let $y: uint8 = 7;
let $a: string = "hiya";&lt;/screen&gt;
&lt;simpara&gt;'map' variables use BPF 'maps'.
These exist for the lifetime of &lt;literal&gt;bpftrace&lt;/literal&gt; itself and can be accessed from all action blocks and user-space.
Map names always start with a &lt;literal&gt;@&lt;/literal&gt;, e.g. &lt;literal&gt;@mymap&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;All valid identifiers can be used as &lt;literal&gt;name&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;The data type of a variable is automatically determined during first assignment and cannot be changed afterwards.&lt;/simpara&gt;
&lt;refsection xml:id="_maps_without_explicit_keys"&gt;
&lt;title&gt;Maps without Explicit Keys&lt;/title&gt;
&lt;simpara&gt;Values can be assigned directly to maps without a key (sometimes refered to as scalar maps).
Note: you can&#8217;t iterate over these maps as they don&#8217;t have an accessible key.&lt;/simpara&gt;
&lt;screen&gt;@name = expression&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_map_keys"&gt;
&lt;title&gt;Map Keys&lt;/title&gt;
&lt;simpara&gt;Setting single value map keys.&lt;/simpara&gt;
&lt;screen&gt;@name[key] = expression&lt;/screen&gt;
&lt;simpara&gt;Map keys that are composed of multiple values are represented as tuples e.g.&lt;/simpara&gt;
&lt;screen&gt;@name[(key1,key2)] = expression&lt;/screen&gt;
&lt;simpara&gt;However, this, more concise, syntax is supported and the same as the explicit
tuple above:&lt;/simpara&gt;
&lt;screen&gt;@name[key1,key2] = expression&lt;/screen&gt;
&lt;simpara&gt;Just like with any variable the type is determined on first use and cannot be modified afterwards.
This applies to both the key(s) and the value type.&lt;/simpara&gt;
&lt;simpara&gt;The following snippets create a map with key signature &lt;literal&gt;(int64, string[16])&lt;/literal&gt; and a value type of &lt;literal&gt;int64&lt;/literal&gt;:&lt;/simpara&gt;
&lt;screen&gt;@<phrase role="pid">
@[(pid, comm)]</phrase>&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_per_thread_variables"&gt;
&lt;title&gt;Per-Thread Variables&lt;/title&gt;
&lt;simpara&gt;These can be implemented as a map keyed on the thread ID. For example, &lt;literal&gt;@start[tid]&lt;/literal&gt;:&lt;/simpara&gt;
&lt;screen&gt;kprobe:do_nanosleep {
  @start[tid] = nsecs;
}</simpara>
<simpara>kretprobe:do_nanosleep /has_key(@start, tid)/ {
  printf("slept for %d ms\n", (nsecs - @start[tid]) / 1000000);
  delete(@start, tid);
}</simpara>
<simpara>/*
 * Sample output:
 * slept for 1000 ms
 * slept for 1009 ms
 * slept for 2002 ms
 * &#8230;&#8203;
 <emphasis role="strong">/&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_builtins"&gt;
&lt;title&gt;Builtins&lt;/title&gt;
&lt;simpara&gt;Builtins are special variables built into the language.
Unlike scratch and map variables they don&#8217;t need a &lt;literal&gt;$&lt;/literal&gt; or &lt;literal&gt;@&lt;/literal&gt; as prefix (except for the positional parameters).
The 'Kernel' column indicates the minimum kernel version required and the 'BPF Helper' column indicates the raw BPF helper function used for this builtin.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="5"&gt;
&lt;colspec colname="col_1" colwidth="20</emphasis>"/&gt;
&lt;colspec colname="col_2" colwidth="20*"/&gt;
&lt;colspec colname="col_3" colwidth="20*"/&gt;
&lt;colspec colname="col_4" colwidth="20*"/&gt;
&lt;colspec colname="col_5" colwidth="20*"/&gt;
&lt;thead&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;Variable&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Type&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Kernel&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;BPF Helper&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Description&lt;/entry&gt;
&lt;/row&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="builtins-positional-parameters"&gt;&lt;literal&gt;$1&lt;/literal&gt;, &lt;literal&gt;$2&lt;/literal&gt;, &lt;literal&gt;&#8230;&#8203;$n&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;The nth positional parameter passed to the bpftrace program.
If less than n parameters are passed this evaluates to &lt;literal&gt;0&lt;/literal&gt;.
For string arguments use the &lt;literal&gt;str()&lt;/literal&gt; call to retrieve the value.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;$<emphasis role="marked">&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Total amount of positional parameters passed.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;arg0&lt;/literal&gt;, &lt;literal&gt;arg1&lt;/literal&gt;, &lt;literal&gt;&#8230;&#8203;argn&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;nth argument passed to the function being traced. These are extracted from the CPU registers. The amount of args passed in registers depends on the CPU architecture. (kprobes, uprobes, usdt).&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;args&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;struct args&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;The struct of all arguments of the traced function. Available in &lt;literal&gt;tracepoint&lt;/literal&gt;, &lt;literal&gt;kfunc&lt;/literal&gt;, and &lt;literal&gt;uprobe&lt;/literal&gt; (with DWARF) probes. Use &lt;literal&gt;args.x&lt;/literal&gt; to access argument &lt;literal&gt;x&lt;/literal&gt; or &lt;literal&gt;args&lt;/literal&gt; to get a record with all arguments.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;cgroup&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.18&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_cgroup_id&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;ID of the cgroup the current process belongs to. Only works with cgroupv2.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;comm&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;string[16]&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.2&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_comm&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Name of the current thread&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;cpid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Child process ID, if bpftrace is invoked with &lt;literal&gt;-c&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;cpu&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.1&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;raw_smp_processor_id&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;ID of the processor executing the BPF program&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;curtask&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.8&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_task&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Pointer to &lt;literal&gt;struct task_struct&lt;/literal&gt; of the current task&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;elapsed&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;(see nsec)&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;ktime_get_ns / ktime_get_boot_ns&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Nanoseconds elapsed since bpftrace initialization, based on &lt;literal&gt;nsecs&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;func&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;string&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Name of the current function being traced (kprobes,uprobes)&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;gid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.2&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_uid_gid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Group ID of the current thread, as seen from the init namespace&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;jiffies&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;5.9&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_jiffies_64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Jiffies of the kernel. In 32-bit system, using this builtin might be slower.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;numaid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;5.8&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;numa_node_id&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;ID of the NUMA node executing the BPF program&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;pid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.2&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_pid_tgid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Process ID of the current thread (aka thread group ID), as seen from the init namespace&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;probe&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;string&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/na&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Name of the current probe&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;rand&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.1&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_prandom_u32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Random number&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;return&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;The return keyword is used to exit the current probe. This differs from exit() in that it doesn&#8217;t exit bpftrace.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;retval&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;int64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;n/a&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Value returned by the function being traced (kretprobe, uretprobe, kretfunc)&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;tid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint32&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.2&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_pid_tgid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Thread ID of the current thread, as seen from the init namespace&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;uint64&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;4.2&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;get_current_uid_gid&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User ID of the current thread, as seen from the init namespace&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;refsection xml:id="builtins-positional-parameters"&gt;
&lt;title&gt;Positional Parameters&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;$1&lt;/literal&gt;, &lt;literal&gt;$2&lt;/literal&gt;, &#8230;&#8203;, &lt;literal&gt;$N&lt;/literal&gt;, &lt;literal&gt;$</emphasis>&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;These are the positional parameters to the bpftrace program, also referred to as command line arguments.
If the parameter is numeric (entirely digits), it can be used as a number.
If it is non-numeric, it must be used as a string in the &lt;literal&gt;str()&lt;/literal&gt; call.
If a parameter is used that was not provided, it will default to zero for numeric context, and "" for string context.
Positional parameters may also be used in probe argument and will be treated as a string parameter.&lt;/simpara&gt;
&lt;simpara&gt;If a positional parameter is used in &lt;literal&gt;str()&lt;/literal&gt;, it is interpreted as a pointer to the actual given string literal, which allows to do pointer arithmetic on it.
Only addition of a single constant, less or equal to the length of the supplied string, is allowed.&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;$<emphasis role="marked">&lt;/literal&gt; returns the number of positional arguments supplied.&lt;/simpara&gt;
&lt;simpara&gt;This allows scripts to be written that use basic arguments to change their behavior.
If you develop a script that requires more complex argument processing, it may be better suited for bcc instead, which
supports Python&#8217;s argparse and completely custom argument processing.&lt;/simpara&gt;
&lt;screen&gt;</emphasis> bpftrace -e 'BEGIN { printf("I got %d, %s (%d args)\n", $1, str($2), $#); }' 42 "hello"</simpara>
<simpara>I got 42, hello (2 args)</simpara>
<section xml:id="_bpftrace_e_begin_printfsn_str1_1_hello">
<title>bpftrace -e 'BEGIN { printf("%s\n", str($1 + 1)) }' "hello"</title>
<simpara>ello&lt;/screen&gt;
&lt;simpara&gt;Script example, bsize.d:&lt;/simpara&gt;
&lt;screen&gt;#!/usr/local/bin/bpftrace</simpara>
<simpara>BEGIN
{
	printf("Tracing block I/O sizes &gt; %d bytes\n", $1);
}</simpara>
<simpara>tracepoint:block:block_rq_issue
/args.bytes &gt; $1/
{
	@ = hist(args.bytes);
}&lt;/screen&gt;
&lt;simpara&gt;When run with a 65536 argument:&lt;/simpara&gt;
&lt;screen&gt;# ./bsize.bt 65536</simpara>
<simpara>Tracing block I/O sizes &gt; 65536 bytes
^C</simpara>
<simpara>@:
[512K, 1M)             1 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|&lt;/screen&gt;
&lt;simpara&gt;It has passed the argument in as &lt;literal&gt;$1&lt;/literal&gt; and used it as a filter.&lt;/simpara&gt;
&lt;simpara&gt;With no arguments, &lt;literal&gt;$1&lt;/literal&gt; defaults to zero:&lt;/simpara&gt;
&lt;screen&gt;# ./bsize.bt
Attaching 2 probes&#8230;&#8203;
Tracing block I/O sizes &gt; 0 bytes
^C</simpara>
<simpara>@:
[4K, 8K)             115 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[8K, 16K)             35 |@@@@@@@@@@@@@@@                                     |
[16K, 32K)             5 |@@                                                  |
[32K, 64K)             3 |@                                                   |
[64K, 128K)            1 |                                                    |
[128K, 256K)           0 |                                                    |
[256K, 512K)           0 |                                                    |
[512K, 1M)             1 |                                                    |&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_functions"&gt;
&lt;title&gt;Functions&lt;/title&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="3"&gt;
&lt;colspec colname="col_1" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_2" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_3" colwidth="33.3334*"/&gt;
&lt;thead&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;Function Name&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Description&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Sync/Async/Compile Time&lt;/entry&gt;
&lt;/row&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-bswap"&gt;&lt;literal&gt;bswap(uint[8|\16|32|64] n)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Reverse byte order&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-buf"&gt;&lt;literal&gt;buf(void <emphasis role="strong">d [, int length])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Returns a hex-formatted string of the data pointed to by d&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-cat"&gt;&lt;literal&gt;cat(char *filename)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Print file content&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-cgroupid"&gt;&lt;literal&gt;cgroupid(char *path)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Resolve cgroup ID&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compile Time&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-cgroup_path"&gt;&lt;literal&gt;cgroup_path(int cgroupid, string filter)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Convert cgroup id to cgroup path&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-exit"&gt;&lt;literal&gt;exit([int code])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Quit bpftrace with an optional exit code&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-join"&gt;&lt;literal&gt;join(char *arr[] [, char *delim])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Print the array&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-kaddr"&gt;&lt;literal&gt;kaddr(char *name)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Resolve kernel symbol name&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compile Time&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-kptr"&gt;&lt;literal&gt;kptr(void *p)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Annotate as kernelspace pointer&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-kstack"&gt;&lt;literal&gt;kstack([StackMode mode, ][int level])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel stack trace&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-ksym"&gt;&lt;literal&gt;ksym(void *p)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Resolve kernel address&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-macaddr"&gt;&lt;literal&gt;macaddr(char[6] addr)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Convert MAC address data&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-nsecs"&gt;&lt;literal&gt;nsecs([TimestampMode mode])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Timestamps and Time Deltas&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-ntop"&gt;&lt;literal&gt;ntop([int af, ]int|char[4|16] addr)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Convert IP address data to text&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-offsetof"&gt;&lt;literal&gt;offsetof(struct, element)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Offset of element in structure&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compile Time&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-override"&gt;&lt;literal&gt;override(u64 rc)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Override return value&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-path"&gt;&lt;literal&gt;path(struct path *path [, int32 size])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Return full path&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-print"&gt;&lt;literal&gt;print(&#8230;&#8203;)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Print a non-map value with default formatting&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-printf"&gt;&lt;literal&gt;printf(char *fmt, &#8230;&#8203;)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Print formatted&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-pton"&gt;&lt;literal&gt;pton(const string *addr)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Convert text IP address to byte array&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compile Time&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-reg"&gt;&lt;literal&gt;reg(char *name)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Returns the value stored in the named register&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-signal"&gt;&lt;literal&gt;signal(char[] signal | u32 signal)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Send a signal to the current process&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-sizeof"&gt;&lt;literal&gt;sizeof(&#8230;&#8203;)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Return size of a type or expression&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-skboutput"&gt;&lt;literal&gt;skboutput(const string p, struct sk_buff *s, &#8230;&#8203;)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Write skb 's data section into a PCAP file&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-str"&gt;&lt;literal&gt;str(char *s [, int length])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Returns the string pointed to by s&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-strcontains"&gt;&lt;literal&gt;strcontains(const char *haystack, const char *needle)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compares whether the string haystack contains the string needle.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-strerror"&gt;&lt;literal&gt;strerror(uint64 error)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Get error message for errno code&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-strftime"&gt;&lt;literal&gt;strftime(char *format, int nsecs)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Return a formatted timestamp&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-strncmp"&gt;&lt;literal&gt;strncmp(char *s1, char *s2, int length)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compare first n characters of two strings&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-system"&gt;&lt;literal&gt;system(char *fmt)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Execute shell command&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-time"&gt;&lt;literal&gt;time(char *fmt)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Print formatted time&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-uaddr"&gt;&lt;literal&gt;uaddr(char *name)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Resolve user-level symbol name&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compile Time&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-uptr"&gt;&lt;literal&gt;uptr(void *p)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Annotate as userspace pointer&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-ustack"&gt;&lt;literal&gt;ustack([StackMode mode, ][int level])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User stack trace&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="functions-usym"&gt;&lt;literal&gt;usym(void *p)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Resolve user space address&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;simpara&gt;Functions that are marked &lt;emphasis role="strong"&gt;async&lt;/emphasis&gt; are asynchronous which can lead to unexpected behaviour, see the &lt;xref linkend="_invocation_mode"/&gt; section for more information.&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;compile time&lt;/emphasis&gt; functions are evaluated at compile time, a static value will be compiled into the program.&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;unsafe&lt;/emphasis&gt; functions can have dangerous side effects and should be used with care, the &lt;literal&gt;--unsafe&lt;/literal&gt; flag is required for use.&lt;/simpara&gt;
&lt;refsection xml:id="functions-bswap"&gt;
&lt;title&gt;bswap&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint8 bswap(uint8 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint16 bswap(uint16 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint32 bswap(uint32 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint64 bswap(uint64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;bswap&lt;/literal&gt; reverses the order of the bytes in integer &lt;literal&gt;n&lt;/literal&gt;. In case of 8 bit integers, &lt;literal&gt;n&lt;/literal&gt; is returned without being modified.
The return type is an unsigned integer of the same width as &lt;literal&gt;n&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-buf"&gt;
&lt;title&gt;buf&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;buffer buf(void * data, [int64 length])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;buf&lt;/literal&gt; reads &lt;literal&gt;length&lt;/literal&gt; amount of bytes from address &lt;literal&gt;data&lt;/literal&gt;.
The maximum value of &lt;literal&gt;length&lt;/literal&gt; is limited to the &lt;literal&gt;BPFTRACE_MAX_STRLEN&lt;/literal&gt; variable.
For arrays the &lt;literal&gt;length&lt;/literal&gt; is optional, it is automatically inferred from the signature.&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;buf&lt;/literal&gt; is address space aware and will call the correct helper based on the address space associated with &lt;literal&gt;data&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;The &lt;literal&gt;buffer&lt;/literal&gt; object returned by &lt;literal&gt;buf&lt;/literal&gt; can safely be printed as a hex encoded string with the &lt;literal&gt;%r&lt;/literal&gt; format specifier.&lt;/simpara&gt;
&lt;simpara&gt;Bytes with values &gt;=32 and &lt;=126 are printed using their ASCII character, other bytes are printed in hex form (e.g. &lt;literal&gt;\x00&lt;/literal&gt;). The &lt;literal&gt;%rx&lt;/literal&gt; format specifier can be used to print everything in hex form, including ASCII characters. The similar &lt;literal&gt;%rh&lt;/literal&gt; format specifier prints everything in hex form without &lt;literal&gt;\x&lt;/literal&gt; and with spaces between bytes (e.g. &lt;literal&gt;0a fe&lt;/literal&gt;).&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  printf("%r\n", buf(kaddr("avenrun"), 8));
}&lt;/screen&gt;
&lt;screen&gt;\x00\x03\x00\x00\x00\x00\x00\x00
\xc2\x02\x00\x00\x00\x00\x00\x00&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-cat"&gt;
&lt;title&gt;cat&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void cat(string namefmt, [&#8230;&#8203;args])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Dump the contents of the named file to stdout.
&lt;literal&gt;cat&lt;/literal&gt; supports the same format string and arguments that &lt;literal&gt;printf&lt;/literal&gt; does.
If the file cannot be opened or read an error is printed to stderr.&lt;/simpara&gt;
&lt;screen&gt;tracepoint:syscalls:sys_enter_execve {
  cat("/proc/%d/maps", pid);
}&lt;/screen&gt;
&lt;screen&gt;55f683ebd000-55f683ec1000 r&#8212;&#8203;p 00000000 08:01 1843399                    /usr/bin/ls
55f683ec1000-55f683ed6000 r-xp 00004000 08:01 1843399                    /usr/bin/ls
55f683ed6000-55f683edf000 r&#8212;&#8203;p 00019000 08:01 1843399                    /usr/bin/ls
55f683edf000-55f683ee2000 rw-p 00021000 08:01 1843399                    /usr/bin/ls
55f683ee2000-55f683ee3000 rw-p 00000000 00:00 0&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-cgroupid"&gt;
&lt;title&gt;cgroupid&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint64 cgroupid(const string path)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;compile time&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;cgroupid&lt;/literal&gt; retrieves the cgroupv2 ID  of the cgroup available at &lt;literal&gt;path&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  print(cgroupid("/sys/fs/cgroup/system.slice"));
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-cgroup_path"&gt;
&lt;title&gt;cgroup_path&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;cgroup_path_t cgroup_path(int cgroupid, string filter)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Convert cgroup id to cgroup path.
This is done asynchronously in userspace when the cgroup_path value is printed,
therefore it can resolve to a different value if the cgroup id gets reassigned.
This also means that the returned value can only be used for printing.&lt;/simpara&gt;
&lt;simpara&gt;A string literal may be passed as an optional second argument to filter cgroup
hierarchies in which the cgroup id is looked up by a wildcard expression (cgroup2
is always represented by "unified", regardless of where it is mounted).&lt;/simpara&gt;
&lt;simpara&gt;The currently mounted hierarchy at /sys/fs/cgroup is used to do the lookup. If
the cgroup with the given id isn&#8217;t present here (e.g. when running in a Docker
container), the cgroup path won&#8217;t be found (unlike when looking up the cgroup
path of a process via /proc/&#8230;&#8203;/cgroup).&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  $cgroup_path = cgroup_path(3436);
  print($cgroup_path);
  print($cgroup_path); /</emphasis> This may print a different path <emphasis role="strong">/
  printf("%s %s", $cgroup_path, $cgroup_path); /</emphasis> This may print two different paths */
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-exit"&gt;
&lt;title&gt;exit&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void exit([int code])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Terminate bpftrace, as if a &lt;literal&gt;SIGTERM&lt;/literal&gt; was received.
The &lt;literal&gt;END&lt;/literal&gt; probe will still trigger (if specified) and maps will be printed.
An optional exit code can be provided.&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  exit();
}&lt;/screen&gt;
&lt;simpara&gt;Or&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  exit(1);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-join"&gt;
&lt;title&gt;join&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void join(char *arr[], [char * sep = ' '])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;join&lt;/literal&gt; joins all the string array &lt;literal&gt;arr&lt;/literal&gt; with &lt;literal&gt;sep&lt;/literal&gt; as separator into one string.
This string will be printed to stdout directly, it cannot be used as string value.&lt;/simpara&gt;
&lt;simpara&gt;The concatenation of the array members is done in BPF and the printing happens in userspace.&lt;/simpara&gt;
&lt;screen&gt;tracepoint:syscalls:sys_enter_execve {
  join(args.argv);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-kaddr"&gt;
&lt;title&gt;kaddr&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint64 kaddr(const string name)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;compile time&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Get the address of the kernel symbol &lt;literal&gt;name&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  $avenrun = kaddr("avenrun");
  $load1 = *$avenrun;
}&lt;/screen&gt;
&lt;simpara&gt;You can find all kernel symbols at &lt;literal&gt;/proc/kallsyms&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-kptr"&gt;
&lt;title&gt;kptr&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;T * kptr(T * ptr)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Marks &lt;literal&gt;ptr&lt;/literal&gt; as a kernel address space pointer.
See the address-spaces section for more information on address-spaces.
The pointer type is left unchanged.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-kstack"&gt;
&lt;title&gt;kstack&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kstack([StackMode mode, ][int limit])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;These are implemented using BPF stack maps.&lt;/simpara&gt;
&lt;screen&gt;kprobe:ip_output { @[kstack()] = count(); }</simpara>
<simpara>/*
 * Sample output:
 * @[
 *  ip_output+1
 *  tcp_transmit_skb+1308
 *  tcp_write_xmit+482
 *  tcp_release_cb+225
 *  release_sock+64
 *  tcp_sendmsg+49
 *  sock_sendmsg+48
 *  sock_write_iter+135
 *   __vfs_write+247
 *  vfs_write+179
 *  sys_write+82
 *   entry_SYSCALL_64_fastpath+30
 * ]: 1708
 */&lt;/screen&gt;
&lt;simpara&gt;Sampling only three frames from the stack (limit = 3):&lt;/simpara&gt;
&lt;screen&gt;kprobe:ip_output { @[kstack(3)] = count(); }</simpara>
<simpara>/*
 * Sample output:
 * @[
 *  ip_output+1
 *  tcp_transmit_skb+1308
 *  tcp_write_xmit+482
 * ]: 1708
 */&lt;/screen&gt;
&lt;simpara&gt;You can also choose a different output format.
Available formats are &lt;literal&gt;bpftrace&lt;/literal&gt;, &lt;literal&gt;perf&lt;/literal&gt;, and &lt;literal&gt;raw&lt;/literal&gt; (no symbolication):&lt;/simpara&gt;
&lt;screen&gt;kprobe:ip_output { @[kstack(perf, 3)] = count(); }</simpara>
<simpara>/*
 * Sample output:
 * @[
 *  ffffffffb4019501 do_mmap+1
 *  ffffffffb401700a sys_mmap_pgoff+266
 *  ffffffffb3e334eb sys_mmap+27
 * ]: 1708
 */&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-ksym"&gt;
&lt;title&gt;ksym&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;ksym_t ksym(uint64 addr)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Retrieve the name of the function that contains address &lt;literal&gt;addr&lt;/literal&gt;.
The address to name mapping happens in user-space.&lt;/simpara&gt;
&lt;simpara&gt;The &lt;literal&gt;ksym_t&lt;/literal&gt; type can be printed with the &lt;literal&gt;%s&lt;/literal&gt; format specifier.&lt;/simpara&gt;
&lt;screen&gt;kprobe:do_nanosleep
{
  printf("%s\n", ksym(reg("ip")));
}</simpara>
<simpara>/*
 * Sample output:
 * do_nanosleep
 <emphasis role="strong">/&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-macaddr"&gt;
&lt;title&gt;macaddr&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;macaddr_t macaddr(char [6] mac)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Create a buffer that holds a macaddress as read from &lt;literal&gt;mac&lt;/literal&gt;
This buffer can be printed in the canonical string format using the &lt;literal&gt;%s&lt;/literal&gt; format specifier.&lt;/simpara&gt;
&lt;screen&gt;kprobe:arp_create {
  $stack_arg0 = *(uint8</emphasis>)(reg("sp") + 8);
  $stack_arg1 = <emphasis role="strong">(uint8</emphasis>)(reg("sp") + 16);
  printf("SRC %s, DST %s\n", macaddr($stack_arg0), macaddr($stack_arg1));
}</simpara>
<simpara>/*
 * Sample output:
 * SRC 18:C0:4D:08:2E:BB, DST 74:83:C2:7F:8C:FF
 */&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-nsecs"&gt;
&lt;title&gt;nsecs&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;nsecs([TimestampMode mode])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Returns a timestamp in nanoseconds, as given by the requested kernel clock.
Defaults to &lt;literal&gt;boot&lt;/literal&gt; if no clock is explicitly requested.&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;nsecs(monotonic)&lt;/literal&gt; - nanosecond timestamp since boot, exclusive of time the system spent suspended (CLOCK_MONOTONIC)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;nsecs(boot)&lt;/literal&gt; - nanoseconds since boot, inclusive of time the system spent suspended (CLOCK_BOOTTIME)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;nsecs(tai)&lt;/literal&gt; - TAI timestamp in nanoseconds (CLOCK_TAI)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;nsecs(sw_tai)&lt;/literal&gt; - approximation of TAI timestamp in nanoseconds, is obtained through the "triple vdso sandwich" method. For older kernels without direct TAI timestamp access in BPF.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;screen&gt;interval:s:1 {
  $sw_tai1 = nsecs(sw_tai);
  $tai = nsecs(tai);
  $sw_tai2 = nsecs(sw_tai);
  printf("sw_tai precision: %lldns\n", ($sw_tai1 + $sw_tai2)/2 - $tai);
}</simpara>
<simpara>/*
 * Sample output:
 * sw_tai precision: -98ns
 * sw_tai precision: -99ns
 * &#8230;&#8203;
 */&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-ntop"&gt;
&lt;title&gt;ntop&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;inet ntop([int64 af, ] int addr)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;inet ntop([int64 af, ] char addr[4])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;inet ntop([int64 af, ] char addr[16])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;ntop&lt;/literal&gt; returns the string representation of an IPv4 or IPv6 address.
&lt;literal&gt;ntop&lt;/literal&gt; will infer the address type (IPv4 or IPv6) based on the &lt;literal&gt;addr&lt;/literal&gt; type and size.
If an integer or &lt;literal&gt;char[4]&lt;/literal&gt; is given, ntop assumes IPv4, if a &lt;literal&gt;char[16]&lt;/literal&gt; is given, ntop assumes IPv6.
You can also pass the address type (e.g. AF_INET) explicitly as the first parameter.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-offsetof"&gt;
&lt;title&gt;offsetof&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;offsetof(STRUCT, FIELD)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;offsetof(EXPRESSION, FIELD)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;compile time&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Returns offset of the field offset bytes in struct.
Similar to kernel &lt;literal&gt;offsetof&lt;/literal&gt; operator.
Note that subfields are not yet supported.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-override"&gt;
&lt;title&gt;override&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;override(uint64 rc)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;unsafe&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Kernel&lt;/emphasis&gt; 4.16&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Helper&lt;/emphasis&gt; &lt;literal&gt;bpf_override&lt;/literal&gt;&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;title&gt;Supported probes&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;kprobe&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;When using &lt;literal&gt;override&lt;/literal&gt; the probed function will not be executed and instead &lt;literal&gt;rc&lt;/literal&gt; will be returned.&lt;/simpara&gt;
&lt;screen&gt;kprobe:__x64_sys_getuid
/comm == "id"/ {
  override(2&lt;&lt;21);
}&lt;/screen&gt;
&lt;screen&gt;uid=4194304 gid=0(root) euid=0(root) groups=0(root)&lt;/screen&gt;
&lt;simpara&gt;This feature only works on kernels compiled with &lt;literal&gt;CONFIG_BPF_KPROBE_OVERRIDE&lt;/literal&gt; and only works on functions tagged &lt;literal&gt;ALLOW_ERROR_INJECTION&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace does not test whether error injection is allowed for the probed function, instead if will fail to load the program into the kernel:&lt;/simpara&gt;
&lt;screen&gt;ioctl(PERF_EVENT_IOC_SET_BPF): Invalid argument
Error attaching probe: 'kprobe:vfs_read'&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-path"&gt;
&lt;title&gt;path&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;char * path(struct path * path [, int32 size])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Kernel&lt;/emphasis&gt; 5.10&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Helper&lt;/emphasis&gt; &lt;literal&gt;bpf_d_path&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;Return full path referenced by struct path pointer in argument. If &lt;literal&gt;size&lt;/literal&gt; is set,
the path will be clamped by &lt;literal&gt;size&lt;/literal&gt; otherwise &lt;literal&gt;BPFTRACE_MAX_STRLEN&lt;/literal&gt; is used.&lt;/simpara&gt;
&lt;simpara&gt;This function can only be used by functions that are allowed to, these functions are contained in the &lt;literal&gt;btf_allowlist_d_path&lt;/literal&gt; set in the kernel.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-print"&gt;
&lt;title&gt;print&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void print(T val)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void print(T val)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void print(@map)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void print(@map, uint64 top)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void print(@map, uint64 top, uint64 div)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;print&lt;/literal&gt; prints a the value, which can be a map or a scalar value, with the default formatting for the type.&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  print(123);
  print("abc");
  exit();
}</simpara>
<simpara>/*
 * Sample output:
 * 123
 * abc
 */&lt;/screen&gt;
&lt;screen&gt;interval:ms:10 { @=hist(rand); }
interval:s:1 {
  print(@);
  exit();
}&lt;/screen&gt;
&lt;simpara&gt;Prints:&lt;/simpara&gt;
&lt;screen&gt;@:
[16M, 32M)             3 |@@@                                                 |
[32M, 64M)             2 |@@                                                  |
[64M, 128M)            1 |@                                                   |
[128M, 256M)           4 |@@@@                                                |
[256M, 512M)           3 |@@@                                                 |
[512M, 1G)            14 |@@@@@@@@@@@@@@                                      |
[1G, 2G)              22 |@@@@@@@@@@@@@@@@@@@@@@                              |
[2G, 4G)              51 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|&lt;/screen&gt;
&lt;simpara&gt;Declared maps and histograms are automatically printed out on program termination.&lt;/simpara&gt;
&lt;simpara&gt;Note that maps are printed by reference while scalar values are copied.
This means that updating and printing maps in a fast loop will likely result in bogus map values as the map will be updated before userspace gets the time to dump and print it.&lt;/simpara&gt;
&lt;simpara&gt;The printing of maps supports the optional &lt;literal&gt;top&lt;/literal&gt; and &lt;literal&gt;div&lt;/literal&gt; arguments.
&lt;literal&gt;top&lt;/literal&gt; limits the printing to the top N entries with the highest integer values&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  $i = 11;
  while($i) {
    @[$i] = --$i;
  }
  print(@, 2);
  clear(@);
  exit()
}</simpara>
<simpara>/*
 * Sample output:
 * @[9]: 9
 * @[10]: 10
 */&lt;/screen&gt;
&lt;simpara&gt;The &lt;literal&gt;div&lt;/literal&gt; argument scales the values prior to printing them.
Scaling values before storing them can result in rounding errors.
Consider the following program:&lt;/simpara&gt;
&lt;screen&gt;kprobe:f {
  @[func] = arg0/10;
}&lt;/screen&gt;
&lt;simpara&gt;With the following sequence as numbers for arg0: &lt;literal&gt;134, 377, 111, 99&lt;/literal&gt;.
The total is &lt;literal&gt;721&lt;/literal&gt; which rounds to &lt;literal&gt;72&lt;/literal&gt; when scaled by 10 but the program would print &lt;literal&gt;70&lt;/literal&gt; due to the rounding of individual values.&lt;/simpara&gt;
&lt;simpara&gt;Changing the print call to &lt;literal&gt;print(@, 5, 2)&lt;/literal&gt; will take the top 5 values and scale them by 2:&lt;/simpara&gt;
&lt;screen&gt;@[6]: 3
@[7]: 3
@[8]: 4
@[9]: 4
@[10]: 5&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-printf"&gt;
&lt;title&gt;printf&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void printf(const string fmt, args&amp;#8230;&amp;#8203;)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;printf()&lt;/literal&gt; formats and prints data.
It behaves similar to &lt;literal&gt;printf()&lt;/literal&gt; found in &lt;literal&gt;C&lt;/literal&gt; and many other languages.&lt;/simpara&gt;
&lt;simpara&gt;The format string has to be a constant, it cannot be modified at runtime.
The formatting of the string happens in user space.
Values are copied and passed by value.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace supports all the typical format specifiers like &lt;literal&gt;%llx&lt;/literal&gt; and &lt;literal&gt;%hhu&lt;/literal&gt;.
The non-standard ones can be found in the table below:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="3"&gt;
&lt;colspec colname="col_1" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_2" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_3" colwidth="33.3334*"/&gt;
&lt;thead&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;Specifier&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Type&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Description&lt;/entry&gt;
&lt;/row&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;r&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;buffer&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Hex-formatted string to print arbitrary binary content returned by the &lt;link linkend="functions-buf"&gt;buf&lt;/link&gt; function.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;rh&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;buffer&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Prints in hex-formatted string without &lt;literal&gt;\x&lt;/literal&gt; and with spaces between bytes (e.g. &lt;literal&gt;0a fe&lt;/literal&gt;)&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;simpara&gt;Supported escape sequences&lt;/simpara&gt;
&lt;simpara&gt;Colors are supported too, using standard terminal escape sequences:&lt;/simpara&gt;
&lt;screen&gt;print("\033[31mRed\t\033[33mYellow\033[0m\n")&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-pton"&gt;
&lt;title&gt;pton&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;char addr[4] pton(const string *addr_v4)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;char addr[16] pton(const string *addr_v6)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;compile time&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;pton&lt;/literal&gt; converts a text representation of an IPv4 or IPv6 address to byte array.
&lt;literal&gt;pton&lt;/literal&gt; infers the address family based on &lt;literal&gt;.&lt;/literal&gt; or &lt;literal&gt;:&lt;/literal&gt; in the given argument.
&lt;literal&gt;pton&lt;/literal&gt; comes in handy when we need to select packets with certain IP addresses.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-reg"&gt;
&lt;title&gt;reg&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;reg(const string name)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;Supported probes&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;kprobe&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;uprobe&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Get the contents of the register identified by &lt;literal&gt;name&lt;/literal&gt;.
Valid names depend on the CPU architecture.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-signal"&gt;
&lt;title&gt;signal&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;signal(const string sig)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;signal(uint32 signum)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;unsafe&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Kernel&lt;/emphasis&gt; 5.3&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Helper&lt;/emphasis&gt; &lt;literal&gt;bpf_send_signal&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;Probe types: k(ret)probe, u(ret)probe, USDT, profile&lt;/simpara&gt;
&lt;simpara&gt;Send a signal to the process being traced.
The signal can either be identified by name, e.g. &lt;literal&gt;SIGSTOP&lt;/literal&gt; or by ID, e.g. &lt;literal&gt;19&lt;/literal&gt; as found in &lt;literal&gt;kill -l&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;kprobe:__x64_sys_execve
/comm == "bash"/ {
  signal(5);
}&lt;/screen&gt;
&lt;screen&gt;$ ls
Trace/breakpoint trap (core dumped)&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-sizeof"&gt;
&lt;title&gt;sizeof&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;sizeof(TYPE)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;sizeof(EXPRESSION)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;compile time&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Returns size of the argument in bytes.
Similar to C/C+ &lt;literal&gt;sizeof&lt;/literal&gt; operator.
Note that the expression does not get evaluated.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-skboutput"&gt;
&lt;title&gt;skboutput&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uint32 skboutput(const string path, struct sk_buff *skb, uint64 length, const uint64 offset)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Kernel&lt;/emphasis&gt; 5.5&lt;/simpara&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Helper&lt;/emphasis&gt; bpf_skb_output&lt;/simpara&gt;
&lt;simpara&gt;Write sk_buff &lt;literal&gt;skb&lt;/literal&gt; 's data section to a PCAP file in the &lt;literal&gt;path&lt;/literal&gt;, starting from &lt;literal&gt;offset&lt;/literal&gt; to &lt;literal&gt;offset&lt;/literal&gt; + &lt;literal&gt;length&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;The PCAP file is encapsulated in RAW IP, so no ethernet header is included.
The &lt;literal&gt;data&lt;/literal&gt; section in the struct &lt;literal&gt;skb&lt;/literal&gt; may contain ethernet header in some kernel contexts, you may set &lt;literal&gt;offset&lt;/literal&gt; to 14 bytes to exclude ethernet header.&lt;/simpara&gt;
&lt;simpara&gt;Each packet&#8217;s timestamp is determined by adding &lt;literal&gt;nsecs&lt;/literal&gt; and boot time, the accuracy varies on different kernels, see &lt;literal&gt;nsecs&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;This function returns 0 on success, or a negative error in case of failure.&lt;/simpara&gt;
&lt;simpara&gt;Environment variable &lt;literal&gt;BPFTRACE_PERF_RB_PAGES&lt;/literal&gt; should be increased in order to capture large packets, or else these packets will be dropped.&lt;/simpara&gt;
&lt;simpara&gt;Usage&lt;/simpara&gt;
&lt;screen&gt;# cat dump.bt
kfunc:napi_gro_receive {
  $ret = skboutput("receive.pcap", args.skb, args.skb-&gt;len, 0);
}</simpara>
<simpara>kfunc:dev_queue_xmit {
  // setting offset to 14, to exclude ethernet header
  $ret = skboutput("output.pcap", args.skb, args.skb-&gt;len, 14);
  printf("skboutput returns %d\n", $ret);
}</simpara>
</section>
<section xml:id="_export_bpftrace_perf_rb_pages1024">
<title>export BPFTRACE_PERF_RB_PAGES=1024</title>

</section>
<section xml:id="_bpftrace_dump_bt">
<title>bpftrace dump.bt</title>
<simpara>&#8230;&#8203;</simpara>
</section>
<section xml:id="_tcpdump_n_r_receive_pcap_head_3">
<title>tcpdump -n -r ./receive.pcap  | head -3</title>
<simpara>reading from file ./receive.pcap, link-type RAW (Raw IP)
dropped privs to tcpdump
10:23:44.674087 IP 22.128.74.231.63175 &gt; 192.168.0.23.22: Flags [.], ack 3513221061, win 14009, options [nop,nop,TS val 721277750 ecr 3115333619], length 0
10:23:45.823194 IP 100.101.2.146.53 &gt; 192.168.0.23.46619: 17273 0/1/0 (130)
10:23:45.823229 IP 100.101.2.146.53 &gt; 192.168.0.23.46158: 45799 1/0/0 A 100.100.45.106 (60)&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-str"&gt;
&lt;title&gt;str&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;str(char * data [, uint32 length)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Helper&lt;/emphasis&gt; &lt;literal&gt;probe_read_str, probe_read_{kernel,user}_str&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;str&lt;/literal&gt; reads a NULL terminated (&lt;literal&gt;\0&lt;/literal&gt;) string from &lt;literal&gt;data&lt;/literal&gt;.
The maximum string length is limited by the &lt;literal&gt;BPFTRACE_MAX_STRLEN&lt;/literal&gt; env variable, unless &lt;literal&gt;length&lt;/literal&gt; is specified and shorter than the maximum.
In case the string is longer than the specified length only &lt;literal&gt;length - 1&lt;/literal&gt; bytes are copied and a NULL byte is appended at the end.&lt;/simpara&gt;
&lt;simpara&gt;When available (starting from kernel 5.5, see the &lt;literal&gt;--info&lt;/literal&gt; flag) bpftrace will automatically use the &lt;literal&gt;kernel&lt;/literal&gt; or &lt;literal&gt;user&lt;/literal&gt; variant of &lt;literal&gt;probe_read_{kernel,user}_str&lt;/literal&gt; based on the address space of &lt;literal&gt;data&lt;/literal&gt;, see &lt;xref linkend="Address-spaces"/&gt; for more information.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-strcontains"&gt;
&lt;title&gt;strcontains&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;int64 strcontains(const char <emphasis role="strong">haystack, const char *needle)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;strcontains&lt;/literal&gt; compares whether the string haystack contains the string needle.
If needle is contained &lt;literal&gt;1&lt;/literal&gt; is returned, else zero is returned.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace doesn&#8217;t read past the length of the shortest string.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-strerror"&gt;
&lt;title&gt;strerror&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;strerror_t strerror(int error)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Convert errno code to string.
This is done asynchronously in userspace when the strerror value is printed, hence the returned value can only be used for printing.&lt;/simpara&gt;
&lt;screen&gt;#include &lt;errno.h&gt;
BEGIN {
  print(strerror(EPERM));
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-strftime"&gt;
&lt;title&gt;strftime&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;timestamp strftime(const string fmt, int64 timestamp_ns)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Format the nanoseconds since boot timestamp &lt;literal&gt;timestamp_ns&lt;/literal&gt; according to the format specified by &lt;literal&gt;fmt&lt;/literal&gt;.
The time conversion and formatting happens in user space, therefore  the &lt;literal&gt;timestamp&lt;/literal&gt; value returned can only be used for printing using the &lt;literal&gt;%s&lt;/literal&gt; format specifier.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace uses the &lt;literal&gt;strftime(3)&lt;/literal&gt; function for formatting time and supports the same format specifiers.&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  printf("%s\n", strftime("%H:%M:%S", nsecs));
}&lt;/screen&gt;
&lt;simpara&gt;bpftrace also supports the following format string extensions:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50</emphasis>"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;thead&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;Specifier&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Description&lt;/entry&gt;
&lt;/row&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;%f&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Microsecond as a decimal number, zero-padded on the left&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-strncmp"&gt;
&lt;title&gt;strncmp&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;int64 strncmp(char * s1, char * s2, int64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;strncmp&lt;/literal&gt; compares up to &lt;literal&gt;n&lt;/literal&gt; characters string &lt;literal&gt;s1&lt;/literal&gt; and string &lt;literal&gt;s2&lt;/literal&gt;.
If they&#8217;re equal &lt;literal&gt;0&lt;/literal&gt; is returned, else a non-zero value is returned.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace doesn&#8217;t read past the length of the shortest string.&lt;/simpara&gt;
&lt;simpara&gt;The use of the &lt;literal&gt;==&lt;/literal&gt; and &lt;literal&gt;!=&lt;/literal&gt; operators is recommended over calling &lt;literal&gt;strncmp&lt;/literal&gt; directly.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-system"&gt;
&lt;title&gt;system&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void system(string namefmt [, &#8230;&#8203;args])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;unsafe&lt;/emphasis&gt;
&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;system&lt;/literal&gt; lets bpftrace run the specified command (&lt;literal&gt;fork&lt;/literal&gt; and &lt;literal&gt;exec&lt;/literal&gt;) until it completes and print its stdout.
The &lt;literal&gt;command&lt;/literal&gt; is run with the same privileges as bpftrace and it blocks execution of the processing threads which can lead to missed events and delays processing of async events.&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  time("%H:%M:%S: ");
  printf("%d\n", @++);
}
interval:s:10 {
  system("/bin/sleep 10");
}
interval:s:30 {
  exit();
}&lt;/screen&gt;
&lt;simpara&gt;Note how the async &lt;literal&gt;time&lt;/literal&gt; and &lt;literal&gt;printf&lt;/literal&gt; first print every second until the &lt;literal&gt;interval:s:10&lt;/literal&gt; probe hits, then they print every 10 seconds due to bpftrace blocking on &lt;literal&gt;sleep&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;Attaching 3 probes&#8230;&#8203;
08:50:37: 0
08:50:38: 1
08:50:39: 2
08:50:40: 3
08:50:41: 4
08:50:42: 5
08:50:43: 6
08:50:44: 7
08:50:45: 8
08:50:46: 9
08:50:56: 10
08:50:56: 11
08:50:56: 12
08:50:56: 13
08:50:56: 14
08:50:56: 15
08:50:56: 16
08:50:56: 17
08:50:56: 18
08:50:56: 19&lt;/screen&gt;
&lt;simpara&gt;&lt;literal&gt;system&lt;/literal&gt; supports the same format string and arguments that &lt;literal&gt;printf&lt;/literal&gt; does.&lt;/simpara&gt;
&lt;screen&gt;tracepoint:syscalls:sys_enter_execve {
  system("/bin/grep %s /proc/%d/status", "vmswap", pid);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-time"&gt;
&lt;title&gt;time&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void time(const string fmt)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Format the current wall time according to the format specifier &lt;literal&gt;fmt&lt;/literal&gt; and print it to stdout.
Unlike &lt;literal&gt;strftime()&lt;/literal&gt; &lt;literal&gt;time()&lt;/literal&gt; doesn&#8217;t send a timestamp from the probe, instead it is the time at which user-space processes the event.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace uses the &lt;literal&gt;strftime(3)&lt;/literal&gt; function for formatting time and supports the same format specifiers.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-uaddr"&gt;
&lt;title&gt;uaddr&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;T * uaddr(const string sym)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;Supported probes&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;uprobes&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;uretprobes&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;USDT&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Does not work with ASLR, see issue &lt;link xl:href="https://github.com/bpftrace/bpftrace/issues/75"&gt;#75&lt;/link&gt;&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;The &lt;literal&gt;uaddr&lt;/literal&gt; function returns the address of the specified symbol.
This lookup happens during program compilation and cannot be used dynamically.&lt;/simpara&gt;
&lt;simpara&gt;The default return type is &lt;literal&gt;uint64*&lt;/literal&gt;.
If the ELF object size matches a known integer size (1, 2, 4 or 8 bytes) the return type is modified to match the width (&lt;literal&gt;uint8*&lt;/literal&gt;, &lt;literal&gt;uint16*&lt;/literal&gt;, &lt;literal&gt;uint32*&lt;/literal&gt; or &lt;literal&gt;uint64*&lt;/literal&gt; resp.).
As ELF does not contain type info the type is always assumed to be unsigned.&lt;/simpara&gt;
&lt;screen&gt;uprobe:/bin/bash:readline {
  printf("PS1: %s\n", str(*uaddr("ps1_prompt")));
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-uptr"&gt;
&lt;title&gt;uptr&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;T * uptr(T * ptr)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Marks &lt;literal&gt;ptr&lt;/literal&gt; as a user address space pointer.
See the address-spaces section for more information on address-spaces.
The pointer type is left unchanged.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-ustack"&gt;
&lt;title&gt;ustack&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;ustack([StackMode mode, ][int limit])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;These are implemented using BPF stack maps.&lt;/simpara&gt;
&lt;screen&gt;kprobe:do_sys_open /comm == "bash"/ { @[ustack()] = count(); }</simpara>
<simpara>/*
 * Sample output:
 * @[
 *  <emphasis>open_nocancel+65
 *  command_word_completion_function+3604
 *  rl_completion_matches+370
 *  bash_default_completion+540
 *  attempt_shell_completion+2092
 *  gen_completion_matches+82
 *  rl_complete_internal+288
 *  rl_complete+145
 *  _rl_dispatch_subseq+647
 *  _rl_dispatch+44
 *  readline_internal_char+479
 *  readline_internal_charloop+22
 *  readline_internal+23
 *  readline+91
 *  yy_readline_get+152
 *  yy_readline_get+429
 *  yy_getc+13
 *  shell_getc+469
 *  read_token+251
 *  yylex+192
 *  yyparse+777
 *  parse_command+126
 *  read_command+207
 *  reader_loop+391
 *  main+2409
 *  </emphasis>libc_start_main+231
 *  0x61ce258d4c544155
 * ]: 9
 */&lt;/screen&gt;
&lt;simpara&gt;Sampling only three frames from the stack (limit = 3):&lt;/simpara&gt;
&lt;screen&gt;kprobe:ip_output { @[ustack(3)] = count(); }</simpara>
<simpara>/*
 * Sample output:
 * @[
 *  __open_nocancel+65
 *  command_word_completion_function+3604
 *  rl_completion_matches+370
 * ]: 20
 */&lt;/screen&gt;
&lt;simpara&gt;You can also choose a different output format.
Available formats are &lt;literal&gt;bpftrace&lt;/literal&gt;, &lt;literal&gt;perf&lt;/literal&gt;, and &lt;literal&gt;raw&lt;/literal&gt; (no symbolication):&lt;/simpara&gt;
&lt;screen&gt;kprobe:ip_output { @[ustack(perf, 3)] = count(); }</simpara>
<simpara>/*
 * Sample output:
 * @[
 *  5649feec4090 readline+0 (/home/mmarchini/bash/bash/bash)
 *  5649fee2bfa6 yy_readline_get+451 (/home/mmarchini/bash/bash/bash)
 *  5649fee2bdc6 yy_getc+13 (/home/mmarchini/bash/bash/bash)
 * ]: 20
 */&lt;/screen&gt;
&lt;simpara&gt;Note that for these examples to work, bash had to be recompiled with frame pointers.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-usym"&gt;
&lt;title&gt;usym&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;usym_t usym(uint64 * addr)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;title&gt;Supported probes&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;uprobes&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;uretprobes&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Equal to &lt;link linkend="functions-ksym"&gt;ksym&lt;/link&gt; but resolves user space symbols.&lt;/simpara&gt;
&lt;simpara&gt;If ASLR is enabled, user space symbolication only works when the process is running at either the time of the symbol resolution or the time of the probe attachment. The latter requires &lt;literal&gt;BPFTRACE_CACHE_USER_SYMBOLS&lt;/literal&gt; to be set to &lt;literal&gt;PER_PID&lt;/literal&gt;, and might not work with older versions of BCC. A similar limitation also applies to dynamically loaded symbols.&lt;/simpara&gt;
&lt;screen&gt;uprobe:/bin/bash:readline
{
  printf("%s\n", usym(reg("ip")));
}</simpara>
<simpara>/*
 * Sample output:
 * readline
 <emphasis role="strong">/&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="functions-unwatch"&gt;
&lt;title&gt;unwatch&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;void unwatch(void * addr)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Removes a watchpoint&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_map_functions"&gt;
&lt;title&gt;Map Functions&lt;/title&gt;
&lt;simpara&gt;Map functions are built-in functions who&#8217;s return value can only be assigned to maps.
The data type associated with these functions are only for internal use and are not compatible with the (integer) operators.&lt;/simpara&gt;
&lt;simpara&gt;Functions that are marked &lt;emphasis role="strong"&gt;async&lt;/emphasis&gt; are asynchronous which can lead to unexpected behavior, see the &lt;xref linkend="_invocation_mode"/&gt; section for more information.&lt;/simpara&gt;
&lt;simpara&gt;See &lt;xref linkend="_advanced_topics"/&gt; for more information on &lt;xref linkend="_map_printing"/&gt;.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="3"&gt;
&lt;colspec colname="col_1" colwidth="33.3333</emphasis>"/&gt;
&lt;colspec colname="col_2" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_3" colwidth="33.3334*"/&gt;
&lt;thead&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;Function Name&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Description&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;Sync/async&lt;/entry&gt;
&lt;/row&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-avg"&gt;&lt;literal&gt;avg(int64 n)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Calculate the running average of &lt;literal&gt;n&lt;/literal&gt; between consecutive calls.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-clear"&gt;&lt;literal&gt;clear(map m)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Clear all keys/values from a map.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-count"&gt;&lt;literal&gt;count()&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Count how often this function is called.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-delete"&gt;&lt;literal&gt;delete(map m, mapkey k)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Delete a single key from a map.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-has_key"&gt;&lt;literal&gt;has_key(map m, mapkey k)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Return true (1) if the key exists in this map. Otherwise return false (0).&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-hist"&gt;&lt;literal&gt;hist(int64 n[, int k])&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Create a log2 histogram of n using buckets per power of 2, 0 &#8656; k &#8656; 5, defaults to 0.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-len"&gt;&lt;literal&gt;len(map m)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Return the number of elements in a map.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-lhist"&gt;&lt;literal&gt;lhist(int64 n, int64 min, int64 max, int64 step)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Create a linear histogram of n. lhist creates M ((max - min) / step) buckets in the range [min,max) where each bucket is step in size.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-max"&gt;&lt;literal&gt;max(int64 n)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Update the map with n if n is bigger than the current value held.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-min"&gt;&lt;literal&gt;min(int64 n)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Update the map with n if n is smaller than the current value held.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-stats"&gt;&lt;literal&gt;stats(int64 n)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Combines the count, avg and sum calls into one.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-sum"&gt;&lt;literal&gt;sum(int64 n)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Calculate the sum of all n passed.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Sync&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="map-functions-zero"&gt;&lt;literal&gt;zero(map m)&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Set all values for all keys to zero.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Async&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;refsection xml:id="map-functions-avg"&gt;
&lt;title&gt;avg&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;avg(int64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Calculate the running average of &lt;literal&gt;n&lt;/literal&gt; between consecutive calls.&lt;/simpara&gt;
&lt;screen&gt;interval:s:1 {
  @x++;
  @y = avg(@x);
  print(@x);
  print(@y);
}&lt;/screen&gt;
&lt;simpara&gt;Internally this keeps two values in the map: value count and running total.
The average is computed in user-space when printing by dividing the total by the
count. However, you can get the average in kernel space in expressions like
&lt;literal&gt;if (@y == 5)&lt;/literal&gt; but this is expensive as bpftrace needs to iterate over all the
cpus to collect and sum BOTH count and total.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-clear"&gt;
&lt;title&gt;clear&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;clear(map m)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Clear all keys/values from map &lt;literal&gt;m&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;interval:ms:100 {
  @[rand % 10] = count();
}</simpara>
<simpara>interval:s:10 {
  print(@);
  clear(@);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-count"&gt;
&lt;title&gt;count&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;count()&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Count how often this function is called.&lt;/simpara&gt;
&lt;simpara&gt;Using &lt;literal&gt;@=count()&lt;/literal&gt; is conceptually similar to &lt;literal&gt;@&#43;&#43;&lt;/literal&gt;.
The difference is that the &lt;literal&gt;count()&lt;/literal&gt; function uses a map type optimized for
performance and correctness using cheap, thread-safe writes (PER_CPU). However, sync reads
can be expensive as bpftrace needs to iterate over all the cpus to collect and
sum these values.&lt;/simpara&gt;
&lt;simpara&gt;Note: This differs from "raw" writes (e.g. &lt;literal&gt;@&#43;&#43;&lt;/literal&gt;) where multiple writers to a
shared location might lose updates, as bpftrace does not generate any implicit
atomic operations.&lt;/simpara&gt;
&lt;simpara&gt;Example one:&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  @ = count();
  @ = count();
  printf("%d\n", (int64)@);   // prints 2
  exit();
}&lt;/screen&gt;
&lt;simpara&gt;Example two:&lt;/simpara&gt;
&lt;screen&gt;interval:ms:100 {
  @ = count();
}</simpara>
<simpara>interval:s:10 {
  // async read
  print(@);
  // sync read
  if (@ &gt; 10) {
    print<indexterm>
<primary>"hello"</primary>
</indexterm>"hello";
  }
  clear(@);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-delete"&gt;
&lt;title&gt;delete&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;delete(map m, mapkey k)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;deprecated &lt;literal&gt;delete(mapkey k)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Delete a single key from a map.
For scalar maps (e.g. no explicit keys), the key is omitted and is equivalent to calling &lt;literal&gt;clear&lt;/literal&gt;.
For map keys that are composed of multiple values (e.g. &lt;literal&gt;@mymap[3, "hello"] = 1&lt;/literal&gt; - remember these values are represented as a tuple) the syntax would be: &lt;literal&gt;delete(@mymap, (3, "hello"));&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;The, now deprecated, API (supported in version &#8656; 0.21.x) of passing map arguments with the key is still supported:
e.g. &lt;literal&gt;delete(@mymap[3, "hello"]);&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;kprobe:dummy {
  @scalar = 1;
  delete(@scalar); // ok
  @single["hello"] = 1;
  delete(@single, "hello"); // ok
  @associative[1,2] = 1;
  delete(@associative, (1,2)); // ok
  delete(@associative); // error
  delete(@associative, 1); // error</simpara>
<literallayout class="monospaced">  // deprecated but ok
  delete(@single["hello"]);
  delete(@associative[1, 2]);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-has_key"&gt;
&lt;title&gt;has_key&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;int has_key(map m, mapkey k)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Return true (1) if the key exists in this map.
Otherwise return false (0).
Error if called with a map that has no keys (aka scalar map).
Return value can also be used for scratch variables and map keys/values.&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;kprobe:dummy {
  @associative[1,2] = 1;
  if (!has_key(@associative, (1,3))) { // ok
    print(("bye"));
  }</literallayout>
<literallayout class="monospaced">@scalar = 1;
if (has_key(@scalar)) { // error
  print(("hello"));
}</literallayout>
<literallayout class="monospaced">  $a = has_key(@associative, (1,2)); // ok
  @b[has_key(@associative, (1,2))] = has_key(@associative, (1,2)); // ok
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-hist"&gt;
&lt;title&gt;hist&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;hist(int64 n[, int k])&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Create a log2 histogram of &lt;literal&gt;n&lt;/literal&gt; using $2^k$ buckets per power of 2,
0 &amp;#8656; k &amp;#8656; 5, defaults to 0.&lt;/simpara&gt;
&lt;screen&gt;kretprobe:vfs_read {
  @bytes = hist(retval);
}&lt;/screen&gt;
&lt;simpara&gt;Prints:&lt;/simpara&gt;
&lt;screen&gt;@:
[1M, 2M)               3 |                                                    |
[2M, 4M)               2 |                                                    |
[4M, 8M)               2 |                                                    |
[8M, 16M)              6 |                                                    |
[16M, 32M)            16 |                                                    |
[32M, 64M)            27 |                                                    |
[64M, 128M)           48 |@                                                   |
[128M, 256M)          98 |@@@                                                 |
[256M, 512M)         191 |@@@@@@                                              |
[512M, 1G)           394 |@@@@@@@@@@@@@                                       |
[1G, 2G)             820 |@@@@@@@@@@@@@@@@@@@@@@@@@@@                         |&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-len"&gt;
&lt;title&gt;len&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;len(map m)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Return the number of elements in the map.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-lhist"&gt;
&lt;title&gt;lhist&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;lhist(int64 n, int64 min, int64 max, int64 step)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Create a linear histogram of &lt;literal&gt;n&lt;/literal&gt;.
&lt;literal&gt;lhist&lt;/literal&gt; creates &lt;literal&gt;M&lt;/literal&gt; (&lt;literal&gt;(max - min) / step&lt;/literal&gt;) buckets in the range &lt;literal&gt;[min,max)&lt;/literal&gt; where each bucket is &lt;literal&gt;step&lt;/literal&gt; in size.
Values in the range &lt;literal&gt;(-inf, min)&lt;/literal&gt; and &lt;literal&gt;(max, inf)&lt;/literal&gt; get their get their own bucket too, bringing the total amount of buckets created to &lt;literal&gt;M+2&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;interval:ms:1 {
  @ = lhist(rand %10, 0, 10, 1);
}</literallayout>
<simpara>interval:s:5 {
  exit();
}&lt;/screen&gt;
&lt;simpara&gt;Prints:&lt;/simpara&gt;
&lt;screen&gt;@:
[0, 1)               306 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         |
[1, 2)               284 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@            |
[2, 3)               294 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          |
[3, 4)               318 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       |
[4, 5)               311 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        |
[5, 6)               362 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|
[6, 7)               336 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    |
[7, 8)               326 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      |
[8, 9)               328 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     |
[9, 10)              318 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       |&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-max"&gt;
&lt;title&gt;max&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;max(int64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Update the map with &lt;literal&gt;n&lt;/literal&gt; if &lt;literal&gt;n&lt;/literal&gt; is bigger than the current value held.
Similar to &lt;literal&gt;count&lt;/literal&gt; this uses a PER_CPU map (thread-safe, fast writes, slow reads).&lt;/simpara&gt;
&lt;simpara&gt;Note: this is different than the typical userspace &lt;literal&gt;max()&lt;/literal&gt; in that bpftrace&#8217;s &lt;literal&gt;max()&lt;/literal&gt;
only takes a single argument. The logical "other" argument to compare to is the value
in the map the "result" is being assigned to.&lt;/simpara&gt;
&lt;simpara&gt;For example, compare the two logically equivalent samples (C vs bpftrace):&lt;/simpara&gt;
&lt;simpara&gt;In C:&lt;/simpara&gt;
&lt;screen&gt;int x = std::max(3, 33);  // x contains 33&lt;/screen&gt;
&lt;simpara&gt;In bpftrace:&lt;/simpara&gt;
&lt;screen&gt;@x = max(3);
@x = max(33);   // @x contains 33&lt;/screen&gt;
&lt;simpara&gt;Also note that bpftrace takes care to handle the unset case. In other words,
there is no default value. The first value you pass to &lt;literal&gt;max()&lt;/literal&gt; will always
be returned.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-min"&gt;
&lt;title&gt;min&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;min(int64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Update the map with &lt;literal&gt;n&lt;/literal&gt; if &lt;literal&gt;n&lt;/literal&gt; is smaller than the current value held.
Similar to &lt;literal&gt;count&lt;/literal&gt; this uses a PER_CPU map (thread-safe, fast writes, slow reads).&lt;/simpara&gt;
&lt;simpara&gt;See &lt;literal&gt;max()&lt;/literal&gt; above for how this differs from the typical userspace &lt;literal&gt;min()&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-stats"&gt;
&lt;title&gt;stats&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;stats(int64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;stats&lt;/literal&gt; combines the &lt;literal&gt;count&lt;/literal&gt;, &lt;literal&gt;avg&lt;/literal&gt; and &lt;literal&gt;sum&lt;/literal&gt; calls into one.&lt;/simpara&gt;
&lt;screen&gt;kprobe:vfs_read {
  @bytes[comm] = stats(arg2);
}&lt;/screen&gt;
&lt;screen&gt;@bytes[bash]: count 7, average 1, total 7
@bytes[sleep]: count 5, average 832, total 4160
@bytes[ls]: count 7, average 886, total 6208
@&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-sum"&gt;
&lt;title&gt;sum&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;sum(int64 n)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Calculate the sum of all &lt;literal&gt;n&lt;/literal&gt; passed.&lt;/simpara&gt;
&lt;simpara&gt;Using &lt;literal&gt;@=sum(5)&lt;/literal&gt; is conceptually similar to &lt;literal&gt;@=5&lt;/literal&gt;.
The difference is that the &lt;literal&gt;sum()&lt;/literal&gt; function uses a map type optimized for
performance and correctness using cheap, thread-safe writes (PER_CPU). However, sync reads
can be expensive as bpftrace needs to iterate over all the cpus to collect and
sum these values.&lt;/simpara&gt;
&lt;simpara&gt;Note: This differs from "raw" writes (e.g. &lt;literal&gt;@=5&lt;/literal&gt;) where multiple writers to a
shared location might lose updates, as bpftrace does not generate any implicit
atomic operations.&lt;/simpara&gt;
&lt;simpara&gt;Example one:&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  @ = sum(5);
  @ = sum(6);
  printf("%d\n", (int64)@);   // prints 11
  clear(@);
  exit();
}&lt;/screen&gt;
&lt;simpara&gt;Example two:&lt;/simpara&gt;
&lt;screen&gt;interval:ms:100 {
  @ = sum(5);
}</simpara>
<simpara>interval:s:10 {
  // async read
  print(@);
  // sync read
  if (@ &gt; 10) {
    print<indexterm>
<primary>"hello"</primary>
</indexterm>"hello";
  }
  clear(@);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="map-functions-zero"&gt;
&lt;title&gt;zero&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;zero(map m)&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;async&lt;/emphasis&gt;&lt;/simpara&gt;
&lt;simpara&gt;Set all values for all keys to zero.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="<emphasis>probes"&gt;
&lt;title&gt;Probes&lt;/title&gt;
&lt;simpara&gt;bpftrace supports various probe types which allow the user to attach BPF programs to different types of events.
Each probe starts with a provider (e.g. &lt;literal&gt;kprobe&lt;/literal&gt;) followed by a colon (&lt;literal&gt;:&lt;/literal&gt;) separated list of options.
The amount of options and their meaning depend on the provider and are detailed below.
The valid values for options can depend on the system or binary being traced, e.g. for uprobes it depends on the binary.
Also see &lt;xref linkend="_listing_probes"/&gt;.&lt;/simpara&gt;
&lt;simpara&gt;It is possible to associate multiple probes with a single action as long as the action is valid for all specified probes.
Multiple probes can be specified as a comma (&lt;literal&gt;,&lt;/literal&gt;) separated list:&lt;/simpara&gt;
&lt;screen&gt;kprobe:tcp_reset,kprobe:tcp_v4_rcv {
  printf("Entered: %s\n", probe);
}&lt;/screen&gt;
&lt;simpara&gt;Wildcards are supported too:&lt;/simpara&gt;
&lt;screen&gt;kprobe:tcp</emphasis>* {
  printf("Entered: %s\n", probe);
}&lt;/screen&gt;
&lt;simpara&gt;Both can be combined:&lt;/simpara&gt;
&lt;screen&gt;kprobe:tcp_reset,kprobe:*socket* {
  printf("Entered: %s\n", probe);
}&lt;/screen&gt;
&lt;simpara&gt;Most providers also support a short name which can be used instead of the full name, e.g. &lt;literal&gt;kprobe:f&lt;/literal&gt; and &lt;literal&gt;k:f&lt;/literal&gt; are identical.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="4"&gt;
&lt;colspec colname="col_1" colwidth="25*"/&gt;
&lt;colspec colname="col_2" colwidth="25*"/&gt;
&lt;colspec colname="col_3" colwidth="25*"/&gt;
&lt;colspec colname="col_4" colwidth="25*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;emphasis role="strong"&gt;Probe Name&lt;/emphasis&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;emphasis role="strong"&gt;Short Name&lt;/emphasis&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;emphasis role="strong"&gt;Description&lt;/emphasis&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;emphasis role="strong"&gt;Kernel/User Level&lt;/emphasis&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-begin-end"&gt;&lt;literal&gt;BEGIN/END&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;-&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Built-in events&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel/User&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-hardware"&gt;&lt;literal&gt;hardware&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;h&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Processor-level events&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-interval"&gt;&lt;literal&gt;interval&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;i&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Timed output&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel/User&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-iterator"&gt;&lt;literal&gt;iter&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;it&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Iterators tracing&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-kfunc"&gt;&lt;literal&gt;kfunc/kretfunc&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;f&lt;/literal&gt;/&lt;literal&gt;fr&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel functions tracing with BTF support&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-kprobe"&gt;&lt;literal&gt;kprobe/kretprobe&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;k&lt;/literal&gt;/&lt;literal&gt;kr&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel function start/return&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-profile"&gt;&lt;literal&gt;profile&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;p&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Timed sampling&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel/User&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-rawtracepoint"&gt;&lt;literal&gt;rawtracepoint&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;rt&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel static tracepoints with raw arguments&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-software"&gt;&lt;literal&gt;software&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;s&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel software events&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-tracepoint"&gt;&lt;literal&gt;tracepoint&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;t&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel static tracepoints&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-uprobe"&gt;&lt;literal&gt;uprobe/uretprobe&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;u&lt;/literal&gt;/&lt;literal&gt;ur&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User-level function start/return&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-usdt"&gt;&lt;literal&gt;usdt&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;U&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User-level static tracepoints&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;User&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;link linkend="probes-watchpoint"&gt;&lt;literal&gt;watchpoint/asyncwatchpoint&lt;/literal&gt;&lt;/link&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;w&lt;/literal&gt;/&lt;literal&gt;aw&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Memory watchpoints&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Kernel&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;refsection xml:id="probes-begin-end"&gt;
&lt;title&gt;BEGIN/END&lt;/title&gt;
&lt;simpara&gt;These are special built-in events provided by the bpftrace runtime.
&lt;literal&gt;BEGIN&lt;/literal&gt; is triggered before all other probes are attached.
&lt;literal&gt;END&lt;/literal&gt; is triggered after all other probes are detached.&lt;/simpara&gt;
&lt;simpara&gt;Note that specifying an &lt;literal&gt;END&lt;/literal&gt; probe doesn&#8217;t override the printing of 'non-empty' maps at exit.
To prevent printing all used maps need be cleared in the &lt;literal&gt;END&lt;/literal&gt; probe:&lt;/simpara&gt;
&lt;screen&gt;END {
    clear(@map1);
    clear(@map2);
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-hardware"&gt;
&lt;title&gt;hardware&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;hardware:event_name:&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;hardware:event_name:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;h&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;These are the pre-defined hardware events provided by the Linux kernel, as commonly traced by the perf utility.
They are implemented using performance monitoring counters (PMCs): hardware resources on the processor.
There are about ten of these, and they are documented in the perf_event_open(2) man page.
The event names are:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;cpu-cycles&lt;/literal&gt; or &lt;literal&gt;cycles&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;instructions&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;cache-references&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;cache-misses&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;branch-instructions&lt;/literal&gt; or &lt;literal&gt;branches&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;branch-misses&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;bus-cycles&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;frontend-stalls&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;backend-stalls&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;ref-cycles&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;The &lt;literal&gt;count&lt;/literal&gt; option specifies how many events must happen before the probe fires (sampling interval).
If &lt;literal&gt;count&lt;/literal&gt; is left unspecified a default value is used.&lt;/simpara&gt;
&lt;simpara&gt;This will fire once for every 1,000,000 cache misses.&lt;/simpara&gt;
&lt;screen&gt;hardware:cache-misses:1e6 { @[pid] = count(); }&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-interval"&gt;
&lt;title&gt;interval&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;interval:us:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;interval:ms:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;interval:s:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;interval:hz:rate&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;i&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;The interval probe fires at a fixed interval as specified by its time spec.
Interval fires on one CPU at a time, unlike &lt;xref linkend="probes-profile"/&gt; probes.&lt;/simpara&gt;
&lt;simpara&gt;This prints the rate of syscalls per second.&lt;/simpara&gt;
&lt;screen&gt;tracepoint:raw_syscalls:sys_enter { @syscalls = count(); }
interval:s:1 { print(@syscalls); clear(@syscalls); }&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-iterator"&gt;
&lt;title&gt;iterator&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;iter:task&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;iter:task:pin&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;iter:task_file&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;iter:task_file:pin&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;iter:task_vma&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;iter:task_vma:pin&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;it&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;emphasis role="strong"&gt;Warning&lt;/emphasis&gt; this feature is experimental and may be subject to interface changes.&lt;/simpara&gt;
&lt;simpara&gt;These are eBPF iterator probes that allow iteration over kernel objects.
Iterator probe can&#8217;t be mixed with any other probe, not even another iterator.
Each iterator probe provides a set of fields that could be accessed with the
ctx pointer. Users can display the set of available fields for each iterator via
-lv options as described below.&lt;/simpara&gt;
&lt;screen&gt;iter:task { printf("%s:%d\n", ctx-&gt;task-&gt;comm, ctx-&gt;task-&gt;pid); }</simpara>
<simpara>/*
 * Sample output:
 * systemd:1
 * kthreadd:2
 * rcu_gp:3
 * rcu_par_gp:4
 * kworker/0:0H:6
 * mm_percpu_wq:8
 */&lt;/screen&gt;
&lt;screen&gt;iter:task_file {
  printf("%s:%d %d:%s\n", ctx-&gt;task-&gt;comm, ctx-&gt;task-&gt;pid, ctx-&gt;fd, path(ctx-&gt;file-&gt;f_path));
}</simpara>
<simpara>/*
 * Sample output:
 * systemd:1 1:/dev/null
 * systemd:1 3:/dev/kmsg
 * &#8230;&#8203;
 * su:1622 2:/dev/pts/1
 * &#8230;&#8203;
 * bpftrace:1892 2:/dev/pts/1
 * bpftrace:1892 6:anon_inode:bpf-prog
 */&lt;/screen&gt;
&lt;screen&gt;iter:task_vma {
  printf("%s %d %lx-%lx\n", comm, pid, ctx-&gt;vma-&gt;vm_start, ctx-&gt;vma-&gt;vm_end);
}</simpara>
<simpara>/*
 * Sample output:
 * bpftrace 119480 55b92c380000-55b92c386000
 * &#8230;&#8203;
 * bpftrace 119480 7ffd55dde000-7ffd55de2000
 */&lt;/screen&gt;
&lt;simpara&gt;It&#8217;s possible to pin an iterator by specifying the optional probe ':pin' part, that defines the pin file.
It can be specified as an absolute or relative path to /sys/fs/bpf.&lt;/simpara&gt;
&lt;formalpara&gt;
&lt;title&gt;relative pin&lt;/title&gt;
&lt;para&gt;
&lt;screen&gt;iter:task:list { printf("%s:%d\n", ctx-&gt;task-&gt;comm, ctx-&gt;task-&gt;pid); }</simpara>
<simpara>/*
 * Sample output:
 * Program pinned to /sys/fs/bpf/list
 */&lt;/screen&gt;
&lt;/para&gt;
&lt;/formalpara&gt;
&lt;formalpara&gt;
&lt;title&gt;absolute pin&lt;/title&gt;
&lt;para&gt;
&lt;screen&gt;iter:task_file:/sys/fs/bpf/files {
  printf("%s:%d %s\n", ctx-&gt;task-&gt;comm, ctx-&gt;task-&gt;pid, path(ctx-&gt;file-&gt;f_path));
}</simpara>
<simpara>/*
 * Sample output:
 * Program pinned to /sys/fs/bpf/files
 */&lt;/screen&gt;
&lt;/para&gt;
&lt;/formalpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-kfunc"&gt;
&lt;title&gt;kfunc and kretfunc&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kfunc[:module]:fn&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;fentry[:module]:fn&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kretfunc[:module]:fn&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;fexit[:module]:fn&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short names&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;f&lt;/literal&gt; (&lt;literal&gt;kfunc&lt;/literal&gt; or &lt;literal&gt;fentry&lt;/literal&gt;)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;fr&lt;/literal&gt; (&lt;literal&gt;kretfunc&lt;/literal&gt; or &lt;literal&gt;fexit&lt;/literal&gt;)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;requires (&lt;literal&gt;--info&lt;/literal&gt;)&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;Kernel features:BTF&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;Probe types:kfunc&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;kfunc&lt;/literal&gt;s attach to kernel functions similar to &lt;xref linkend="probes-kprobe"/&gt;.
They make use of eBPF trampolines which allow kernel code to call into BPF programs with near zero overhead.
&lt;literal&gt;kfunc&lt;/literal&gt; and &lt;literal&gt;kretfunc&lt;/literal&gt; are aliased as &lt;literal&gt;fentry&lt;/literal&gt; and &lt;literal&gt;fexit&lt;/literal&gt; to match how these are referenced in the kernel.&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;kfunc&lt;/literal&gt;s make use of BTF type information to derive the type of function arguments at compile time.
This removes the need for manual type casting and makes the code more resilient against small signature changes in the kernel.
The function arguments are available in the &lt;literal&gt;args&lt;/literal&gt; struct which can be inspected by doing verbose listing (see &lt;xref linkend="_listing_probes"/&gt;).
These arguments are also available in the return probe (&lt;literal&gt;kretfunc&lt;/literal&gt;), unlike &lt;literal&gt;kretprobe&lt;/literal&gt;.&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -lv 'kfunc:tcp_reset'</simpara>
<simpara>kfunc:tcp_reset
    struct sock * sk
    struct sk_buff * skb&lt;/screen&gt;
&lt;screen&gt;kfunc:x86_pmu_stop {
  printf("pmu %s stop\n", str(args.event-&gt;pmu-&gt;name));
}&lt;/screen&gt;
&lt;simpara&gt;The fget function takes one argument as file descriptor and you can access it via args.fd and the return value is accessible via retval:&lt;/simpara&gt;
&lt;screen&gt;kretfunc:fget {
  printf("fd %d name %s\n", args.fd, str(retval-&gt;f_path.dentry-&gt;d_name.name));
}</simpara>
<simpara>/*
 * Sample output:
 * fd 3 name ld.so.cache
 * fd 3 name libselinux.so.1
 */&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-kprobe"&gt;
&lt;title&gt;kprobe and kretprobe&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kprobe[:module]:fn&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kprobe[:module]:fn+offset&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kretprobe[:module]:fn&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short names&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;k&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;kr&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;kprobe&lt;/literal&gt;s allow for dynamic instrumentation of kernel functions.
Each time the specified kernel function is executed the attached BPF programs are ran.&lt;/simpara&gt;
&lt;screen&gt;kprobe:tcp_reset {
  @tcp_resets = count()
}&lt;/screen&gt;
&lt;simpara&gt;Function arguments are available through the &lt;literal&gt;argN&lt;/literal&gt; for register args. Arguments passed on stack are available using the stack pointer, e.g. &lt;literal&gt;$stack_arg0 = &lt;emphasis role="strong"&gt;(int64&lt;/emphasis&gt;)reg("sp") + 16&lt;/literal&gt;.
Whether arguments passed on stack or in a register depends on the architecture and the number or arguments used, e.g. on x86_64 the first 6 non-floating point arguments are passed in registers and all following arguments are passed on the stack.
Note that floating point arguments are typically passed in special registers which don&#8217;t count as &lt;literal&gt;argN&lt;/literal&gt; arguments which can cause confusion.
Consider a function with the following signature:&lt;/simpara&gt;
&lt;screen&gt;void func(int a, double d, int x)&lt;/screen&gt;
&lt;simpara&gt;Due to &lt;literal&gt;d&lt;/literal&gt; being a floating point, &lt;literal&gt;x&lt;/literal&gt; is accessed through &lt;literal&gt;arg1&lt;/literal&gt; where one might expect &lt;literal&gt;arg2&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;bpftrace does not detect the function signature so it is not aware of the argument count or their type.
It is up to the user to perform &lt;xref linkend="_type_conversion"/&gt; when needed, e.g.&lt;/simpara&gt;
&lt;screen&gt;#include &lt;linux/path.h&gt;
#include &lt;linux/dcache.h&gt;</simpara>
<simpara>kprobe:vfs_open
{
	printf("open path: %s\n", str(<indexterm>
<primary>struct path *)arg0)-&gt;dentry-&gt;d_name.name</primary>
</indexterm>struct path *)arg0)-&gt;dentry-&gt;d_name.name;
}&lt;/screen&gt;
&lt;simpara&gt;Here arg0 was cast as a (struct path *), since that is the first argument to vfs_open.
The struct support is the same as bcc and based on available kernel headers.
This means that many, but not all, structs will be available, and you may need to manually define structs.&lt;/simpara&gt;
&lt;simpara&gt;If the kernel has BTF (BPF Type Format) data, all kernel structs are always available without defining them. For example:&lt;/simpara&gt;
&lt;screen&gt;kprobe:vfs_open {
  printf("open path: %s\n", str(<indexterm>
<primary>struct path *)arg0)-&gt;dentry-&gt;d_name.name</primary>
</indexterm>struct path *)arg0)-&gt;dentry-&gt;d_name.name;
}&lt;/screen&gt;
&lt;simpara&gt;You can optionally specify a kernel module, either to include BTF data from that module, or to specify that the traced function should come from that module.&lt;/simpara&gt;
&lt;screen&gt;kprobe:kvm:x86_emulate_insn
{
  $ctxt = (struct x86_emulate_ctxt *) arg0;
  printf("eip = 0x%lx\n", $ctxt-&gt;eip);
}&lt;/screen&gt;
&lt;simpara&gt;See &lt;xref linkend="_btf_support"/&gt; for more details.&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;kprobe&lt;/literal&gt; s are not limited to function entry, they can be attached to any instruction in a function by specifying an offset from the start of the function.&lt;/simpara&gt;
&lt;simpara&gt;&lt;literal&gt;kretprobe&lt;/literal&gt; s trigger on the return from a kernel function.
Return probes do not have access to the function (input) arguments, only to the return value (through &lt;literal&gt;retval&lt;/literal&gt;).
A common pattern to work around this is by storing the arguments in a map on function entry and retrieving in the return probe:&lt;/simpara&gt;
&lt;screen&gt;kprobe:d_lookup
{
	$name = (struct qstr *)arg1;
	@fname[tid] = $name-&gt;name;
}</simpara>
<simpara>kretprobe:d_lookup
/@fname[tid]/
{
	printf("%-8d %-6d %-16s M %s\n", elapsed / 1e6, pid, comm,
	    str(@fname[tid]));
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-profile"&gt;
&lt;title&gt;profile&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;profile:us:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;profile:ms:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;profile:s:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;profile:hz:rate&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;p&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Profile probes fire on each CPU on the specified interval.
These operate using perf_events (a Linux kernel facility, which is also used by the perf command).&lt;/simpara&gt;
&lt;screen&gt;profile:hz:99 { @[tid] = count(); }&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-rawtracepoint"&gt;
&lt;title&gt;rawtracepoint&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;rawtracepoint:event&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;rt&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;The hook point triggered by &lt;literal&gt;tracepoint&lt;/literal&gt; and &lt;literal&gt;rawtracepoint&lt;/literal&gt; is the same.
&lt;literal&gt;tracepoint&lt;/literal&gt; and &lt;literal&gt;rawtracepoint&lt;/literal&gt; are nearly identical in terms of functionality.
The only difference is in the program context.
&lt;literal&gt;rawtracepoint&lt;/literal&gt; offers raw arguments to the tracepoint while &lt;literal&gt;tracepoint&lt;/literal&gt; applies further processing to the raw arguments.
The additional processing is defined inside the kernel.&lt;/simpara&gt;
&lt;screen&gt;rawtracepoint:block_rq_insert {
  printf("%llx %llx\n", arg0, arg1);
}&lt;/screen&gt;
&lt;simpara&gt;Tracepoint arguments are available via the &lt;literal&gt;argN&lt;/literal&gt; builtins.
Each arg is a 64-bit integer.
The available arguments can be found in the relative path of the kernel source code &lt;literal&gt;include/trace/events/&lt;/literal&gt;. For example:&lt;/simpara&gt;
&lt;screen&gt;include/trace/events/block.h
DEFINE_EVENT(block_rq, block_rq_insert,
	TP_PROTO(struct request_queue <emphasis role="strong">q, struct request *rq),
	TP_ARGS(q, rq)
);&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-software"&gt;
&lt;title&gt;software&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;software:event:&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;software:event:count&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;s&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;These are the pre-defined software events provided by the Linux kernel, as commonly traced via the perf utility.
They are similar to tracepoints, but there is only about a dozen of these, and they are documented in the perf_event_open(2) man page.
If the count is not provided, a default is used.&lt;/simpara&gt;
&lt;simpara&gt;The event names are:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;cpu-clock&lt;/literal&gt; or &lt;literal&gt;cpu&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;task-clock&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;page-faults&lt;/literal&gt; or &lt;literal&gt;faults&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;context-switches&lt;/literal&gt; or &lt;literal&gt;cs&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;cpu-migrations&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;minor-faults&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;major-faults&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;alignment-faults&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;emulation-faults&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;dummy&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;bpf-output&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;screen&gt;software:faults:100 { @[comm] = count(); }&lt;/screen&gt;
&lt;simpara&gt;This roughly counts who is causing page faults, by sampling the process name for every one in one hundred faults.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-tracepoint"&gt;
&lt;title&gt;tracepoint&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;tracepoint:subsys:event&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;t&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Tracepoints are hooks into events in the kernel.
Tracepoints are defined in the kernel source and compiled into the kernel binary which makes them a form of static tracing.
Unlike &lt;literal&gt;kprobe&lt;/literal&gt; s, new tracepoints cannot be added without modifying the kernel.&lt;/simpara&gt;
&lt;simpara&gt;The advantage of tracepoints is that they generally provide a more stable interface than &lt;literal&gt;kprobe&lt;/literal&gt; s do, they do not depend on the existence of a kernel function.&lt;/simpara&gt;
&lt;screen&gt;tracepoint:syscalls:sys_enter_openat {
  printf("%s %s\n", comm, str(args.filename));
}&lt;/screen&gt;
&lt;simpara&gt;Tracepoint arguments are available in the &lt;literal&gt;args&lt;/literal&gt; struct which can be inspected with verbose listing, see the &lt;xref linkend="_listing_probes"/&gt; section for more details.&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -lv "tracepoint:</emphasis>"</simpara>
<simpara>tracepoint:xhci-hcd:xhci_setup_device_slot
  u32 info
  u32 info2
  u32 tt_info
  u32 state
&#8230;&#8203;&lt;/screen&gt;
&lt;simpara&gt;Alternatively members for each tracepoint can be listed from their /format file in /sys.&lt;/simpara&gt;
&lt;simpara&gt;Apart from the filename member, we can also print flags, mode, and more.
After the "common" members listed first, the members are specific to the tracepoint.&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;title&gt;Additional information&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;link xl:href="https://www.kernel.org/doc/html/latest/trace/tracepoints.html"&gt;https://www.kernel.org/doc/html/latest/trace/tracepoints.html&lt;/link&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-uprobe"&gt;
&lt;title&gt;uprobe, uretprobe&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uprobe:binary:func&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uprobe:binary:func+offset&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uprobe:binary:offset&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;uretprobe:binary:func&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short names&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;u&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;ur&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;&lt;literal&gt;uprobe&lt;/literal&gt; s or user-space probes are the user-space equivalent of &lt;literal&gt;kprobe&lt;/literal&gt; s.
The same limitations that apply &lt;xref linkend="probes-kprobe"/&gt; also apply to &lt;literal&gt;uprobe&lt;/literal&gt; s and &lt;literal&gt;uretprobe&lt;/literal&gt; s, namely: arguments are available via the &lt;literal&gt;argN&lt;/literal&gt; and &lt;literal&gt;sargN&lt;/literal&gt; builtins and can only be accessed with a uprobe (&lt;literal&gt;sargN&lt;/literal&gt; is more common for older versions of golang).
retval is the return value for the instrumented function and can only be accessed with a uretprobe.&lt;/simpara&gt;
&lt;screen&gt;uprobe:/bin/bash:readline { printf("arg0: %d\n", arg0); }&lt;/screen&gt;
&lt;simpara&gt;What does arg0 of readline() in /bin/bash contain?
I don&#8217;t know, so I&#8217;ll need to look at the bash source code to find out what its arguments are.&lt;/simpara&gt;
&lt;simpara&gt;When tracing libraries, it is sufficient to specify the library name instead of
a full path. The path will be then automatically resolved using &lt;literal&gt;/etc/ld.so.cache&lt;/literal&gt;:&lt;/simpara&gt;
&lt;screen&gt;uprobe:libc:malloc { printf("Allocated %d bytes\n", arg0); }&lt;/screen&gt;
&lt;simpara&gt;If the traced binary has DWARF included, function arguments are available in the &lt;literal&gt;args&lt;/literal&gt; struct which can be inspected with verbose listing, see the &lt;xref linkend="_listing_probes"/&gt; section for more details.&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -lv 'uprobe:/bin/bash:rl_set_prompt'</simpara>
<simpara>uprobe:/bin/bash:rl_set_prompt
    const char* prompt&lt;/screen&gt;
&lt;simpara&gt;When tracing C&#43;&#43; programs, it&#8217;s possible to turn on automatic symbol demangling by using the &lt;literal&gt;:cpp&lt;/literal&gt; prefix:&lt;/simpara&gt;
&lt;screen&gt;# bpftrace:cpp:"bpftrace::BPFtrace::add_probe" { &#8230;&#8203; }&lt;/screen&gt;
&lt;simpara&gt;It is important to note that for &lt;literal&gt;uretprobe&lt;/literal&gt; s to work the kernel runs a special helper on user-space function entry which overrides the return address on the stack.
This can cause issues with languages that have their own runtime like Golang:&lt;/simpara&gt;
&lt;formalpara&gt;
&lt;title&gt;example.go&lt;/title&gt;
&lt;para&gt;
&lt;screen&gt;func myprint(s string) {
  fmt.Printf("Input: %s\n", s)
}</simpara>
<simpara>func main() {
  ss := []string{"a", "b", "c"}
  for _, s := range ss {
    go myprint(s)
  }
  time.Sleep(1*time.Second)
}&lt;/screen&gt;
&lt;/para&gt;
&lt;/formalpara&gt;
&lt;formalpara&gt;
&lt;title&gt;bpftrace&lt;/title&gt;
&lt;para&gt;
&lt;screen&gt;# bpftrace -e 'uretprobe:./test:main.myprint { @=count(); }' -c ./test
runtime: unexpected return pc for main.myprint called from 0x7fffffffe000
stack: frame={sp:0xc00008cf60, fp:0xc00008cfd0} stack=[0xc00008c000,0xc00008d000)
fatal error: unknown caller pc&lt;/screen&gt;
&lt;/para&gt;
&lt;/formalpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-usdt"&gt;
&lt;title&gt;usdt&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;usdt:binary_path:probe_name&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;usdt:binary_path:[probe_namespace]:probe_name&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;usdt:library_path:probe_name&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;usdt:library_path:[probe_namespace]:probe_name&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short name&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;U&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Where probe_namespace is optional if probe_name is unique within the binary.&lt;/simpara&gt;
&lt;simpara&gt;You can target the entire host (or an entire process&#8217;s address space by using the &lt;literal&gt;-p&lt;/literal&gt; arg) by using a single wildcard in place of the binary_path/library_path:&lt;/simpara&gt;
&lt;screen&gt;usdt:*:loop { printf("hi\n"); }&lt;/screen&gt;
&lt;simpara&gt;Please note that if you use wildcards for the probe_name or probe_namespace and end up targeting multiple USDTs for the same probe you might get errors if you also utilize the USDT argument builtin (e.g. arg0) as they could be of different types.&lt;/simpara&gt;
&lt;simpara&gt;Arguments are available via the &lt;literal&gt;argN&lt;/literal&gt; builtins:&lt;/simpara&gt;
&lt;screen&gt;usdt:/root/tick:loop { printf("%s: %d\n", str(arg0), arg1); }&lt;/screen&gt;
&lt;simpara&gt;bpftrace also supports USDT semaphores.
If both your environment and bpftrace support uprobe refcounts, then USDT semaphores are automatically activated for all processes upon probe attachment (and --usdt-file-activation becomes a noop).
You can check if your system supports uprobe refcounts by running:&lt;/simpara&gt;
&lt;screen&gt;# bpftrace --info 2&gt;&amp;1 | grep "uprobe refcount"
bcc bpf_attach_uprobe refcount: yes
  uprobe refcount (depends on Build:bcc bpf_attach_uprobe refcount): yes&lt;/screen&gt;
&lt;simpara&gt;If your system does not support uprobe refcounts, you may activate semaphores by passing in -p $PID or --usdt-file-activation.
--usdt-file-activation looks through /proc to find processes that have your probe&#8217;s binary mapped with executable permissions into their address space and then tries to attach your probe.
Note that file activation occurs only once (during attach time).
In other words, if later during your tracing session a new process with your executable is spawned, your current tracing session will not activate the new process.
Also note that --usdt-file-activation matches based on file path.
This means that if bpftrace runs from the root host, things may not work as expected if there are processes execved from private mount namespaces or bind mounted directories.
One workaround is to run bpftrace inside the appropriate namespaces (i.e. the container).&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="probes-watchpoint"&gt;
&lt;title&gt;watchpoint and asyncwatchpoint&lt;/title&gt;
&lt;itemizedlist&gt;
&lt;title&gt;variants&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;watchpoint:absolute_address:length:mode&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;watchpoint:function+argN:length:mode&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;itemizedlist&gt;
&lt;title&gt;short names&lt;/title&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;w&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;&lt;literal&gt;aw&lt;/literal&gt;&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;This feature is experimental and may be subject to interface changes.
Memory watchpoints are also architecture dependent.&lt;/simpara&gt;
&lt;simpara&gt;These are memory watchpoints provided by the kernel.
Whenever a memory address is written to (&lt;literal&gt;w&lt;/literal&gt;), read
from (&lt;literal&gt;r&lt;/literal&gt;), or executed (&lt;literal&gt;x&lt;/literal&gt;), the kernel can generate an event.&lt;/simpara&gt;
&lt;simpara&gt;In the first form, an absolute address is monitored.
If a pid (&lt;literal&gt;-p&lt;/literal&gt;) or a command (&lt;literal&gt;-c&lt;/literal&gt;) is provided, bpftrace takes the address as a userspace address and monitors the appropriate process.
If not, bpftrace takes the address as a kernel space address.&lt;/simpara&gt;
&lt;simpara&gt;In the second form, the address present in &lt;literal&gt;argN&lt;/literal&gt; when &lt;literal&gt;function&lt;/literal&gt; is entered is
monitored.
A pid or command must be provided for this form.
If synchronous (&lt;literal&gt;watchpoint&lt;/literal&gt;), a &lt;literal&gt;SIGSTOP&lt;/literal&gt; is sent to the tracee upon function entry.
The tracee will be &lt;literal&gt;SIGCONT&lt;/literal&gt;ed after the watchpoint is attached.
This is to ensure events are not missed.
If you want to avoid the &lt;literal&gt;SIGSTOP&lt;/literal&gt; + &lt;literal&gt;SIGCONT&lt;/literal&gt; use &lt;literal&gt;asyncwatchpoint&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;Note that on most architectures you may not monitor for execution while monitoring read or write.&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -e 'watchpoint:0x10000000:8:rw { printf("hit!\n"); }' -c ./testprogs/watchpoint&lt;/screen&gt;
&lt;simpara&gt;Print the call stack every time the &lt;literal&gt;jiffies&lt;/literal&gt; variable is updated:&lt;/simpara&gt;
&lt;screen&gt;watchpoint:0x$(awk '$3 == "jiffies" {print $1}' /proc/kallsyms):8:w {
  @[kstack] = count();
}&lt;/screen&gt;
&lt;simpara&gt;"hit" and exit when the memory pointed to by &lt;literal&gt;arg1&lt;/literal&gt; of &lt;literal&gt;increment&lt;/literal&gt; is written to:&lt;/simpara&gt;
&lt;programlisting language="C" linenumbering="unnumbered"&gt;# cat wpfunc.c
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;</simpara>
<simpara><emphasis>attribute</emphasis><indexterm>
<primary>noinline</primary>
</indexterm>noinline
void increment(<emphasis>attribute</emphasis><indexterm>
<primary>unused</primary>
</indexterm>unused int _, int *i)
{
  (*i)++;
}</simpara>
<simpara>int main()
{
  int <emphasis role="strong">i = malloc(sizeof(int));
  while (1)
  {
    increment(0, i);
    (*i);
    usleep(1000);
  }
}&lt;/programlisting&gt;
&lt;screen&gt;# bpftrace -e 'watchpoint:increment+arg1:4:w { printf("hit!\n"); exit() }' -c ./wpfunc&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_config_variables"&gt;
&lt;title&gt;Config Variables&lt;/title&gt;
&lt;simpara&gt;Some behavior can only be controlled through config variables, which are listed here.
These can be set via the &lt;xref linkend="_config_block"/&gt; directly in a script (before any probes) or via their environment variable equivalent, which is upper case and includes the &lt;literal&gt;BPFTRACE_&lt;/literal&gt; prefix e.g. &lt;literal&gt;stack_mode&lt;/literal&gt;'s environment variable would be &lt;literal&gt;BPFTRACE_STACK_MODE&lt;/literal&gt;.&lt;/simpara&gt;
&lt;refsection xml:id="_cache_user_symbols"&gt;
&lt;title&gt;cache_user_symbols&lt;/title&gt;
&lt;simpara&gt;Default: PER_PROGRAM if ASLR disabled or &lt;literal&gt;-c&lt;/literal&gt; option given, PER_PID otherwise.&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;PER_PROGRAM - each program has its own cache. If there are more processes with enabled ASLR for a single program, this might produce incorrect results.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;PER_PID - each process has its own cache. This is accurate for processes with ASLR enabled, and enables bpftrace to preload caches for processes running at probe attachment ti
me.
If there are many processes running, it will consume a lot of a memory.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;NONE - caching disabled. This saves the most memory, but at the cost of speed.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_cpp_demangle"&gt;
&lt;title&gt;cpp_demangle&lt;/title&gt;
&lt;simpara&gt;Default: 1&lt;/simpara&gt;
&lt;simpara&gt;C symbol demangling in userspace stack traces is enabled by default.&lt;/simpara&gt;
&lt;simpara&gt;This feature can be turned off by setting the value of this environment variable to &lt;literal&gt;0&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="<emphasis>lazy_symbolication"&gt;
&lt;title&gt;lazy_symbolication&lt;/title&gt;
&lt;simpara&gt;Default: 0&lt;/simpara&gt;
&lt;simpara&gt;For user space symbols, symbolicate lazily/on-demand (1) or symbolicate everything ahead of time (0).&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_log_size"&gt;
&lt;title&gt;log_size&lt;/title&gt;
&lt;simpara&gt;Default: 1000000&lt;/simpara&gt;
&lt;simpara&gt;Log size in bytes.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_max_bpf_progs"&gt;
&lt;title&gt;max_bpf_progs&lt;/title&gt;
&lt;simpara&gt;Default: 512&lt;/simpara&gt;
&lt;simpara&gt;This is the maximum number of BPF programs (functions) that bpftrace can generate.
The main purpose of this limit is to prevent bpftrace from hanging since generating a lot of probes
takes a lot of resources (and it should not happen often).&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_max_cat_bytes"&gt;
&lt;title&gt;max_cat_bytes&lt;/title&gt;
&lt;simpara&gt;Default: 10000&lt;/simpara&gt;
&lt;simpara&gt;Maximum bytes read by cat builtin.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_max_map_keys"&gt;
&lt;title&gt;max_map_keys&lt;/title&gt;
&lt;simpara&gt;Default: 4096&lt;/simpara&gt;
&lt;simpara&gt;This is the maximum number of keys that can be stored in a map.
Increasing the value will consume more memory and increase startup times.
There are some cases where you will want to, for example: sampling stack traces, recording timestamps for each page, etc.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_max_probes"&gt;
&lt;title&gt;max_probes&lt;/title&gt;
&lt;simpara&gt;Default: 512&lt;/simpara&gt;
&lt;simpara&gt;This is the maximum number of probes that bpftrace can attach to.
Increasing the value will consume more memory, increase startup times, and can incur high performance overhead or even freeze/crash the
system.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_max_strlen"&gt;
&lt;title&gt;max_strlen&lt;/title&gt;
&lt;simpara&gt;Default: 64&lt;/simpara&gt;
&lt;simpara&gt;The maximum length (in bytes) for values created by &lt;literal&gt;str()&lt;/literal&gt;, &lt;literal&gt;buf()&lt;/literal&gt; and &lt;literal&gt;path()&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;This limit is necessary because BPF requires the size of all dynamically-read strings (and similar) to be declared up front. This is the size for all strings (and similar) in bpftrace unless specified at the call site.
There is no artificial limit on what you can tune this to. But you may be wasting resources (memory and cpu) if you make this too high.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_max_type_res_iterations"&gt;
&lt;title&gt;max_type_res_iterations&lt;/title&gt;
&lt;simpara&gt;Default: 0&lt;/simpara&gt;
&lt;simpara&gt;Maximum number of levels of nested field accesses for tracepoint args.
0 is unlimited.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_missing_probes"&gt;
&lt;title&gt;missing_probes&lt;/title&gt;
&lt;simpara&gt;Default: &lt;literal&gt;warn&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;Controls handling of probes with multiple kprobe or uprobe attach points which
cannot be attached to some functions because they do not exist in the kernel or
in the traced binary.&lt;/simpara&gt;
&lt;simpara&gt;The possible options are:
- &lt;literal&gt;error&lt;/literal&gt; - always fail on missing probes
- &lt;literal&gt;warn&lt;/literal&gt; - print a warning but continue execution
- &lt;literal&gt;ignore&lt;/literal&gt; - silently ignore missing probes&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_on_stack_limit"&gt;
&lt;title&gt;on_stack_limit&lt;/title&gt;
&lt;simpara&gt;Default: 32&lt;/simpara&gt;
&lt;simpara&gt;The maximum size (in bytes) of individual objects that will be stored on the BPF stack. If they are larger than this limit they will be stored in pre-allocated memory.&lt;/simpara&gt;
&lt;simpara&gt;This exists because the BPF stack is limited to 512 bytes and large objects make it more likely that we&#8217;ll run out of space. bpftrace can store objects that are larger than the &lt;literal&gt;on_stack_limit&lt;/literal&gt; in pre-allocated memory to prevent this stack error. However, storing in pre-allocated memory may be less memory efficient. Lower this default number if you are still seeing a stack memory error or increase it if you&#8217;re worried about memory consumption.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_perf_rb_pages"&gt;
&lt;title&gt;perf_rb_pages&lt;/title&gt;
&lt;simpara&gt;Default: 64&lt;/simpara&gt;
&lt;simpara&gt;Number of pages to allocate per CPU perf ring buffer.
The value must be a power of 2.
If you&#8217;re getting a lot of dropped events bpftrace may not be processing events in the ring buffer fast enough.
It may be useful to bump the value higher so more events can be queued up.
The tradeoff is that bpftrace will use more memory.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_stack_mode"&gt;
&lt;title&gt;stack_mode&lt;/title&gt;
&lt;simpara&gt;Default: bpftrace&lt;/simpara&gt;
&lt;simpara&gt;Output format for ustack and kstack builtins.
Available modes/formats:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;bpftrace&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;perf&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;raw: no symbolication&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;This can be overwritten at the call site.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_str_trunc_trailer"&gt;
&lt;title&gt;str_trunc_trailer&lt;/title&gt;
&lt;simpara&gt;Default: &lt;literal&gt;..&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;Trailer to add to strings that were truncated.
Set to empty string to disable truncation trailers.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_environment_variables"&gt;
&lt;title&gt;Environment Variables&lt;/title&gt;
&lt;simpara&gt;These are not available as part of the standard set of &lt;xref linkend="_config_variables"/&gt; and can only be set as environment variables.&lt;/simpara&gt;
&lt;refsection xml:id="_bpftrace_btf"&gt;
&lt;title&gt;BPFTRACE_BTF&lt;/title&gt;
&lt;simpara&gt;Default: None&lt;/simpara&gt;
&lt;simpara&gt;The path to a BTF file. By default, bpftrace searches several locations to find a BTF file.
See src/btf.cpp for the details.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_bpftrace_debug_output"&gt;
&lt;title&gt;BPFTRACE_DEBUG_OUTPUT&lt;/title&gt;
&lt;simpara&gt;Default: 0&lt;/simpara&gt;
&lt;simpara&gt;Outputs bpftrace&#8217;s runtime debug messages to the trace_pipe. This feature can be turned on by setting
the value of this environment variable to &lt;literal&gt;1&lt;/literal&gt;.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_bpftrace_kernel_build"&gt;
&lt;title&gt;BPFTRACE_KERNEL_BUILD&lt;/title&gt;
&lt;simpara&gt;Default: &lt;literal&gt;/lib/modules/$(uname -r)&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;Only used with &lt;literal&gt;BPFTRACE_KERNEL_SOURCE&lt;/literal&gt; if it is out-of-tree Linux kernel build.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_bpftrace_kernel_source"&gt;
&lt;title&gt;BPFTRACE_KERNEL_SOURCE&lt;/title&gt;
&lt;simpara&gt;Default: &lt;literal&gt;/lib/modules/$(uname -r)&lt;/literal&gt;&lt;/simpara&gt;
&lt;simpara&gt;bpftrace requires kernel headers for certain features, which are searched for in this directory.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_bpftrace_vmlinux"&gt;
&lt;title&gt;BPFTRACE_VMLINUX&lt;/title&gt;
&lt;simpara&gt;Default: None&lt;/simpara&gt;
&lt;simpara&gt;This specifies the vmlinux path used for kernel symbol resolution when attaching kprobe to offset.
If this value is not given, bpftrace searches vmlinux from pre defined locations.
See src/attached_probe.cpp:find_vmlinux() for details.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_options_expanded"&gt;
&lt;title&gt;Options Expanded&lt;/title&gt;
&lt;refsection xml:id="_debug_output"&gt;
&lt;title&gt;Debug Output&lt;/title&gt;
&lt;simpara&gt;The &lt;literal&gt;-d STAGE&lt;/literal&gt; option produces debug output. It prints the output of the
bpftrace execution stage given by the &lt;emphasis&gt;STAGE&lt;/emphasis&gt; argument. The option can be used
multiple times (with different stage names) and the special value &lt;literal&gt;all&lt;/literal&gt; prints
the output of all the supported stages. The option also takes multiple stages
in one invocation as comma separated values.&lt;/simpara&gt;
&lt;simpara&gt;Note: This is primarily used for bpftrace developers.&lt;/simpara&gt;
&lt;simpara&gt;The supported options are:&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="2"&gt;
&lt;colspec colname="col_1" colwidth="50</emphasis>"/&gt;
&lt;colspec colname="col_2" colwidth="50*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;ast&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Prints the Abstract Syntax Tree (AST) after every pass.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;codegen&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Prints the unoptimized LLVM IR as produced by &lt;literal&gt;CodegenLLVM&lt;/literal&gt;.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;codegen-opt&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Prints the optimized LLVM IR, i.e. the code which will be compiled into BPF
bytecode.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;dis&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Disassembles and prints out the generated bytecode that &lt;literal&gt;libbpf&lt;/literal&gt; will see.
Only available in debug builds.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;libbpf&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Captures and prints libbpf log for all libbpf operations that bpftrace uses.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;verifier&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Captures and prints the BPF verifier log.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;all&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Prints the output of all of the above stages.&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_listing_probes"&gt;
&lt;title&gt;Listing Probes&lt;/title&gt;
&lt;simpara&gt;Probe listing is the method to discover which probes are supported by the current system.
Listing supports the same syntax as normal attachment does and alternatively can be
combined with &lt;literal&gt;-e&lt;/literal&gt; or filename args to see all the probes that a program would attach to.&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -l 'kprobe:*'
# bpftrace -l 't:syscalls:*openat*
# bpftrace -l 'kprobe:tcp*,trace
# bpftrace -l 'k:*socket*,tracepoint:syscalls:*tcp*'
# bpftrace -l -e 'tracepoint:xdp:mem</emphasis>* { exit(); }'
# bpftrace -l my_script.bt
# bpftrace -lv 'enum cpu_usage_stat'&lt;/screen&gt;
&lt;simpara&gt;The verbose flag (&lt;literal&gt;-v&lt;/literal&gt;) can be specified to inspect arguments (&lt;literal&gt;args&lt;/literal&gt;) for providers that support it:&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -l 'kretfunc:tcp_reset,tracepoint:syscalls:sys_enter_openat' -v
kretfunc:tcp_reset
    struct sock * sk
    struct sk_buff * skb
tracepoint:syscalls:sys_enter_openat
    int __syscall_nr
    int dfd
    const char * filename
    int flags
    umode_t mode</simpara>
</section>
<section xml:id="_bpftrace_l_uprobebinbashrl_set_prompt_v_works_only_if_binbash_has_dwarf">
<title>bpftrace -l 'uprobe:/bin/bash:rl_set_prompt' -v    # works only if /bin/bash has DWARF</title>
<simpara>uprobe:/bin/bash:rl_set_prompt
    const char *prompt</simpara>
</section>
<section xml:id="_bpftrace_lv_struct_css_task_iter">
<title>bpftrace -lv 'struct css_task_iter'</title>
<simpara>struct css_task_iter {
        struct cgroup_subsys *ss;
        unsigned int flags;
        struct list_head *cset_pos;
        struct list_head *cset_head;
        struct list_head *tcset_pos;
        struct list_head *tcset_head;
        struct list_head *task_pos;
        struct list_head *cur_tasks_head;
        struct css_set *cur_cset;
        struct css_set *cur_dcset;
        struct task_struct *cur_task;
        struct list_head iters_node;
};&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_preprocessor_options"&gt;
&lt;title&gt;Preprocessor Options&lt;/title&gt;
&lt;simpara&gt;The &lt;literal&gt;-I&lt;/literal&gt; option can be used to add directories to the list of directories that bpftrace uses to look for headers.
Can be defined multiple times.&lt;/simpara&gt;
&lt;screen&gt;# cat program.bt
#include &lt;foo.h&gt;</simpara>
<simpara>BEGIN { @ = FOO }</simpara>
</section>
<section xml:id="_bpftrace_program_bt">
<title>bpftrace program.bt</title>
<simpara>definitions.h:1:10: fatal error: 'foo.h' file not found</simpara>
</section>
<section xml:id="_tmpinclude">
<title>/tmp/include</title>
<simpara>foo.h</simpara>
</section>
<section xml:id="_bpftrace_i_tmpinclude_program_bt">
<title>bpftrace -I /tmp/include program.bt</title>
<simpara>Attaching 1 probe&#8230;&#8203;&lt;/screen&gt;
&lt;simpara&gt;The &lt;literal&gt;--include&lt;/literal&gt; option can be used to include headers by default.
Can be defined multiple times.
Headers are included in the order they are defined, and they are included before any other include in the program being executed.&lt;/simpara&gt;
&lt;screen&gt;# bpftrace --include linux/path.h --include linux/dcache.h \
    -e 'kprobe:vfs_open { printf("open path: %s\n", str(<indexterm>
<primary>struct path *)arg0)-&gt;dentry-&gt;d_name.name</primary>
</indexterm>struct path *)arg0)-&gt;dentry-&gt;d_name.name; }'</simpara>
<simpara>Attaching 1 probe&#8230;&#8203;
open path: .com.google.Chrome.ASsbu2
open path: .com.google.Chrome.gimc10
open path: .com.google.Chrome.R1234s&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_verbose_output"&gt;
&lt;title&gt;Verbose Output&lt;/title&gt;
&lt;simpara&gt;The &lt;literal&gt;-v&lt;/literal&gt; option prints more information about the program as it is run:&lt;/simpara&gt;
&lt;screen&gt;# bpftrace -v -e 'tracepoint:syscalls:sys_enter_nanosleep { printf("%s is sleeping.\n", comm); }'
AST node count: 7
Attaching 1 probe&#8230;&#8203;</simpara>
<simpara>load tracepoint:syscalls:sys_enter_nanosleep, with BTF, with func_infos: Success</simpara>
<simpara>Program ID: 111
Attaching tracepoint:syscalls:sys_enter_nanosleep
iscsid is sleeping.
iscsid is sleeping.
[&#8230;&#8203;]&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_advanced_topics"&gt;
&lt;title&gt;Advanced Topics&lt;/title&gt;
&lt;refsection xml:id="_address_spaces"&gt;
&lt;title&gt;Address Spaces&lt;/title&gt;
&lt;simpara&gt;Kernel and user pointers live in different address spaces which, depending on the CPU architecture, might overlap.
Trying to read a pointer that is in the wrong address space results in a runtime error.
This error is hidden by default but can be enabled with the &lt;literal&gt;-kk&lt;/literal&gt; flag:&lt;/simpara&gt;
&lt;screen&gt;stdin:1:9-12: WARNING: Failed to probe_read_user: Bad address (-14)
BEGIN { @=*uptr(kaddr("do_poweroff")) }
        <subscript>~</subscript>&lt;/screen&gt;
&lt;simpara&gt;bpftrace tries to automatically set the correct address space for a pointer based on the probe type, but might fail in cases where it is unclear.
The address space can be changed with the &lt;link linkend="functions-kptr"&gt;kptrs&lt;/link&gt; and &lt;link linkend="functios-uptr"&gt;uptr&lt;/link&gt; functions.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_btf_support"&gt;
&lt;title&gt;BTF Support&lt;/title&gt;
&lt;simpara&gt;If the kernel version has BTF support, kernel types are automatically available and there is no need to include additional headers to use them.
It is not recommended to mix definitions from multiple sources (ie. BTF and header files).
If your program mixes definitions, bpftrace will do its best but can easily get confused due to redefinition conflicts.
Prefer to exclusively use BTF as it can never get out of sync on a running system. BTF is also less susceptible to parsing failures (C is constantly evolving).
Almost all current linux deployments will support BTF.&lt;/simpara&gt;
&lt;simpara&gt;To allow users to detect this situation in scripts, the preprocessor macro &lt;literal&gt;BPFTRACE_HAVE_BTF&lt;/literal&gt; is defined if BTF is detected.
See &lt;literal&gt;tools/&lt;/literal&gt; for examples of its usage.&lt;/simpara&gt;
&lt;simpara&gt;Requirements for using BTF for vmlinux:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;Linux 4.18+ with CONFIG_DEBUG_INFO_BTF=y&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;Building requires dwarves with pahole v1.13+&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;bpftrace v0.9.3+ with BTF support (built with libbpf v0.0.4+)&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;Additional requirements for using BTF for kernel modules:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;Linux 5.11+ with CONFIG_DEBUG_INFO_BTF_MODULES=y&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;Building requires dwarves with pahole v1.19+&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;See kernel documentation for more information on BTF.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_clang_environment_variables"&gt;
&lt;title&gt;Clang Environment Variables&lt;/title&gt;
&lt;simpara&gt;bpftrace parses header files using libclang, the C interface to Clang.
Thus environment variables affecting the clang toolchain can be used.
For example, if header files are included from a non-default directory, the &lt;literal&gt;CPATH&lt;/literal&gt; or &lt;literal&gt;C_INCLUDE_PATH&lt;/literal&gt; environment variables can be set to allow clang to locate the files.
See clang documentation for more information on these environment variables and their usage.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_complex_tools"&gt;
&lt;title&gt;Complex Tools&lt;/title&gt;
&lt;simpara&gt;bpftrace can be used to create some powerful one-liners and some simple tools.
For complex tools, which may involve command line options, positional parameters, argument processing, and customized output, consider switching to bcc.
bcc provides Python (and other) front-ends, enabling usage of all the other Python libraries (including argparse), as well as a direct control of the kernel BPF program.
The down side is that bcc is much more verbose and laborious to program.
Together, bpftrace and bcc are complimentary.&lt;/simpara&gt;
&lt;simpara&gt;An expected development path would be exploration with bpftrace one-liners, then and ad hoc scripting with bpftrace, then finally, when needed, advanced tooling with bcc.&lt;/simpara&gt;
&lt;simpara&gt;As an example of bpftrace vs bcc differences, the bpftrace xfsdist.bt tool also exists in bcc as xfsdist.py. Both measure the same functions and produce the same summary of information.
However, the bcc version supports various arguments:&lt;/simpara&gt;
&lt;screen&gt;# ./xfsdist.py -h
usage: xfsdist.py [-h] [-T] [-m] [-p PID] [interval] [count]</simpara>
<simpara>Summarize XFS operation latency</simpara>
<simpara>positional arguments:
  interval            output interval, in seconds
  count               number of outputs</simpara>
<simpara>optional arguments:
  -h, --help          show this help message and exit
  -T, --notimestamp   don&#8217;t include timestamp on interval output
  -m, --milliseconds  output in milliseconds
  -p PID, --pid PID   trace this PID only</simpara>
<simpara>examples:
    ./xfsdist            # show operation latency as a histogram
    ./xfsdist -p 181     # trace PID 181 only
    ./xfsdist 1 10       # print 1 second summaries, 10 times
    ./xfsdist -m 5       # 5s summaries, milliseconds&lt;/screen&gt;
&lt;simpara&gt;The bcc version is 131 lines of code. The bpftrace version is 22.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_errors"&gt;
&lt;title&gt;Errors&lt;/title&gt;
&lt;orderedlist numeration="arabic"&gt;
&lt;listitem&gt;
&lt;simpara&gt;Looks like the BPF stack limit of 512 bytes is exceeded BPF programs that operate on many data items may hit this limit.
There are a number of things you can try to stay within the limit:&lt;/simpara&gt;
&lt;orderedlist numeration="loweralpha"&gt;
&lt;listitem&gt;
&lt;simpara&gt;Find ways to reduce the size of the data used in the program. Eg, avoid strings if they are unnecessary: use pid instead of comm. Use fewer map keys.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;Split your program over multiple probes.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;Check the status of the BPF stack limit in Linux (it may be increased in the future, maybe as a tuneable).&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;(advanced): Run -d and examine the LLVM IR, and look for ways to optimize src/ast/codegen_llvm.cpp.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/orderedlist&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;Kernel headers not found
bpftrace requires kernel headers for certain features, which are searched for by default in: &lt;literal&gt;/lib/modules/$(uname -r)&lt;/literal&gt;.
The default search directory can be overridden using the environment variable BPFTRACE_KERNEL_SOURCE and also BPFTRACE_KERNEL_BUILD if it is out-of-tree Linux kernel build.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/orderedlist&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_invocation_mode"&gt;
&lt;title&gt;Invocation Mode&lt;/title&gt;
&lt;simpara&gt;There are three invocation modes for bpftrace built-in functions.&lt;/simpara&gt;
&lt;informaltable frame="all" rowsep="1" colsep="1"&gt;
&lt;tgroup cols="3"&gt;
&lt;colspec colname="col_1" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_2" colwidth="33.3333*"/&gt;
&lt;colspec colname="col_3" colwidth="33.3334*"/&gt;
&lt;tbody&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Mode&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Description&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Example functions&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Synchronous&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;The value/effect of the built-in function is determined/handled right away by the bpf program in the kernel space.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;reg(), str(), ntop()&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Asynchronous&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;The value/effect of the built-in function is determined/handled later by the bpftrace process in the user space.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;printf(), clear(), exit()&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;row&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;Compile-time&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;The value of the built-in function is determined before bpf programs are running.&lt;/simpara&gt;&lt;/entry&gt;
&lt;entry align="left" valign="top"&gt;&lt;simpara&gt;&lt;literal&gt;kaddr(), cgroupid(), offsetof()&lt;/literal&gt;&lt;/simpara&gt;&lt;/entry&gt;
&lt;/row&gt;
&lt;/tbody&gt;
&lt;/tgroup&gt;
&lt;/informaltable&gt;
&lt;simpara&gt;While BPF in the kernel can do a lot there are still things that can only be done from user space, like the outputting (printing) of data.
The way bpftrace handles this is by sending events from the BPF program which user-space will pick up some time in the future (usually in milliseconds).
Operations that happen in the kernel are 'synchronous' ('sync') and those that are handled in user space are 'asynchronous' ('async')&lt;/simpara&gt;
&lt;simpara&gt;The asynchronous behaviour can lead to some unexpected behavior as updates can happen before user space had time to process the event. The following situations may occur:&lt;/simpara&gt;
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;simpara&gt;event loss: when using printf(), the amount of data printed may be less than the actual number of events generated by the kernel during BPF program&#8217;s execution.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;simpara&gt;delayed exit: when using the exit() to terminate the program, bpftrace needs to handle the exit signal asynchronously causing the BPF program may continue to run for some additional time.&lt;/simpara&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;simpara&gt;One example is updating a map value in a tight loop:&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
    @=0;
    unroll(10) {
      print(@);
      @++;
    }
    exit()
}&lt;/screen&gt;
&lt;simpara&gt;Maps are printed by reference not by value and as the value gets updated right after the print user-space will likely only see the final value once it processes the event:&lt;/simpara&gt;
&lt;screen&gt;@: 10
@: 10
@: 10
@: 10
@: 10
@: 10
@: 10
@: 10
@: 10
@: 10&lt;/screen&gt;
&lt;simpara&gt;Therefore, when you need precise event statistics, it is recommended to use synchronous functions (e.g. count() and hist()) to ensure more reliable and accurate results.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_map_printing"&gt;
&lt;title&gt;Map Printing&lt;/title&gt;
&lt;simpara&gt;By default when a bpftrace program exits it will print all maps to stdout.
If you don&#8217;t want this to happen you can specify an &lt;literal&gt;END&lt;/literal&gt; probe and &lt;literal&gt;clear&lt;/literal&gt; the maps you don&#8217;t want printed (unfortunately this doesn&#8217;t work on scalar maps) e.g. this script:&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;BEGIN {
  @a = 1;
  @b[1] = 1;
}</simpara>
<simpara>END {
  clear(@a);
  clear(@b);
}&lt;/screen&gt;
&lt;simpara&gt;will print this on exit:&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;@a: 0&lt;/screen&gt;
&lt;simpara&gt;Additionally, if you want to get a snapshot of your maps before script exit, you can send the running bpftrace process a &lt;literal&gt;SIGUSR1&lt;/literal&gt; signal. bpftrace will then print all maps to stdout. Example:&lt;/simpara&gt;
&lt;screen linenumbering="unnumbered"&gt;# bpftrace -e 'BEGIN { @b[1] = 2; }' &amp; kill -s USR1 $(pidof bpftrace)
&#8230;&#8203;
@b[1]: 2&lt;/screen&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_systemd_support"&gt;
&lt;title&gt;Systemd support&lt;/title&gt;
&lt;variablelist&gt;
&lt;varlistentry&gt;
&lt;term&gt;To run bpftrace in the background using systemd&lt;/term&gt;
&lt;listitem&gt;
&lt;/listitem&gt;
&lt;/varlistentry&gt;
&lt;/variablelist&gt;
&lt;screen&gt;# systemd-run --unit=bpftrace --service-type=notify bpftrace -e 'kprobe:do_nanosleep { printf("%d sleeping\n", pid); }'&lt;/screen&gt;
&lt;simpara&gt;In the above example, systemd-run will not finish until bpftrace has attached
its probes, so you can be sure that all following commands will be traced. To
stop tracing, run &lt;literal&gt;systemctl stop bpftrace&lt;/literal&gt;.&lt;/simpara&gt;
&lt;simpara&gt;To debug early boot issues, bpftrace can be invoked via a systemd service
ordered before the service that needs to be traced. A basic unit file to run
bpftrace before another service looks as follows::&lt;/simpara&gt;
&lt;screen&gt;[Unit]
Before=service-i-want-to-trace.service</simpara>
<simpara>Type=notify
ExecStart=bpftrace -e 'kprobe:do_nanosleep { printf("%d sleeping\n", pid); }'&lt;/screen&gt;
&lt;simpara&gt;Similarly to the systemd-run example, the service to be traced will not start
until bpftrace started by the systemd unit has attached its probes.&lt;/simpara&gt;
&lt;/refsection&gt;
&lt;refsection xml:id="_per_cpu_types"&gt;
&lt;title&gt;PER_CPU types&lt;/title&gt;
&lt;simpara&gt;For bpftrace PER_CPU types (search this document for "PER_CPU"), you may coerce
(and thus force a more expensive synchronous read) the type to an integer using
a cast or by doing a comparison. This is useful for when you need an integer
during comparisons, &lt;literal&gt;printf()&lt;/literal&gt;, or other.&lt;/simpara&gt;
&lt;simpara&gt;For example:&lt;/simpara&gt;
&lt;screen&gt;BEGIN {
  @c = count();
  @s = sum(3);
  @s = sum(9);</simpara>
<literallayout class="monospaced">  if (@s == 12) {                             // Coerces @s
    printf("%d %d\n", (int64)@c, (int64)@s);  // Coerces @c and @s and prints "1 12"
  }
}&lt;/screen&gt;
&lt;/refsection&gt;
&lt;/refsection&gt;
        &lt;/div&gt; &lt;!-- Closing the content div --&gt;
    &lt;/div&gt; &lt;!-- Closing the content-wrapper div --&gt;
&lt;/body&gt;
&lt;/html&gt;</literallayout>
</section>
</article>